<mxfile host="app.diagrams.net" modified="2024-01-03T06:29:47.895Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" etag="DzKVc8OrvoD8Rz4v6a1I" version="22.1.16" type="github" pages="8">
  <diagram id="Cw5CgzrS2XZY5D7zUyKp" name="OSインストール">
    <mxGraphModel dx="1647" dy="839" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="szrl0G2C0kDdJWEc9u8A-1" value="### 1. NICに固定IPを設定&#xa;1. **ネットワーク設定ファイルの編集**:&#xa;   - nmtui&#xa;   - IPADDR、NETMASK、GATEWAY、DNS1（必要に応じて）を適切な値に設定&#xa;&#xa;&#xa;2. **ネットワークサービスの再起動**:&#xa;   - `sudo systemctl restart network`&#xa;&#xa;&#xa;### 2. インターネット接続の確認&#xa;- **pingコマンドで外部接続を確認**:&#xa;[admin@localhost ~]$ ping www.i2c.jp&#xa;PING www.i2c.jp (163.44.185.163) 56(84) bytes of data.&#xa;64 bytes from 163-44-185-163.virt.lolipop.jp (163.44.185.163): icmp_seq=1 ttl=128 time=21.3 ms&#xa;64 bytes from 163-44-185-163.virt.lolipop.jp (163.44.185.163): icmp_seq=2 ttl=128 time=21.3 ms&#xa;64 bytes from 163-44-185-163.virt.lolipop.jp (163.44.185.163): icmp_seq=3 ttl=128 time=26.5 ms&#xa;  &#xa;&#xa;&#xa;### 3. SELinuxの無効化&#xa;1. **現在のSELinuxの状態確認**:&#xa;   - `getenforce`&#xa;   - &quot;Enforcing&quot; と表示されている場合は、SELinuxが有効です。&#xa;2. **SELinuxを無効にする**:&#xa;   - `sudo setenforce 0`&#xa;   - 恒久的に無効にするには、`/etc/selinux/config` ファイルを編集し、`SELINUX=disabled` に設定します。&#xa;&#xa;&#xa;### 4. OSアップデート&#xa;- **パッケージの更新**:&#xa;  - `sudo yum update`&#xa;  - これにより、CentOSとすべてのインストールされたパッケージが最新の状態に更新されます。&#xa;&#xa;&#xa;### 5. open-vm-toolsのインストール&#xa;- VMware環境でCentOSを実行している場合にのみ適用します。&#xa;- **open-vm-toolsのインストール**:&#xa;  - `sudo yum install open-vm-tools`&#xa;  - VMware上でのCentOSのパフォーマンスと管理を改善します。&#xa;  &#xa;[admin@localhost ~]$ rpm -q open-vm-tools&#xa;open-vm-tools-11.0.5-3.el7_9.7.x86_64" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="67" y="47" width="667" height="641" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram name="SSH" id="EZcLK18hInASVvrHGoVY">
    <mxGraphModel dx="1647" dy="839" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="BWevsbJ870ceWmd9wQKM-1" value="### 8. TeraTermからSSH接続確認&#xa;1. **Windows端末からTeraTermを起動**:&#xa;   - TeraTermをインストールしていない場合は、インストールが必要です。&#xa;2. **SSH接続設定**:&#xa;   - TeraTermの「新しい接続」で、CentOSサーバのIPアドレスまたはホスト名を入力します。&#xa;   - ポート番号をデフォルトの22から変更した場合は、変更したポート番号（例: 10022）を入力します。&#xa;3. **接続テスト**:&#xa;   - 「OK」をクリックして接続を試みます。成功すれば、ログインプロンプトが表示されます。&#xa;&#xa;&#xa;### 9. SSHセキュリティ設定&#xa;1. **SSHポートの変更**:&#xa;   - `sudo vi /etc/ssh/sshd_config` でSSH設定ファイルを開きます。&#xa;   - `Port 22` を `Port 10022`（または他のポート）に変更します。&#xa;   ===&#xa;   # If you want to change the port on a SELinux system, you have to tell&#xa;   # SELinux about this change.&#xa;   # semanage port -a -t ssh_port_t -p tcp #PORTNUMBER&#xa;   #&#xa;   Port 22&#xa;   Port 10022&#xa;   #AddressFamily any&#xa;   #ListenAddress 0.0.0.0&#xa;   #ListenAddress ::&#xa;   ===&#xa;2. **rootユーザの直接ログイン禁止**:&#xa;   - 同じファイルで `PermitRootLogin yes` を `PermitRootLogin no` に変更します。&#xa;3. **公開鍵認証の設定**:&#xa;   - teratermの鍵生成より、鍵を生成します。&#xa;   - 公開鍵をサーバの `vi ~/.ssh/authorized_keys` にコピーします。&#xa;4. **FirewalldでSSHポートを開放**:&#xa;   - `sudo firewall-cmd --permanent --add-port=10022/tcp` を実行します。&#xa;   - `sudo firewall-cmd --reload` で設定を適用します。&#xa;5. **SSHサービスの再起動**:&#xa;   - `sudo systemctl restart sshd`&#xa;&#xa;&#xa;### 10. サービス・ポート・ログ確認&#xa;1. **SSHサービスの状態確認**:&#xa;   - `systemctl status sshd` でSSHサービスの状態を確認します。&#xa;   ===&#xa;   [root@localhost ~]# systemctl status sshd&#xa;   ● sshd.service - OpenSSH server daemon&#xa;      Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)&#xa;      Active: active (running) since 金 2023-12-29 15:37:12 JST; 16s ago&#xa;   ===&#xa;2. **SSHポートの確認**:&#xa;   - `ss -tuln | grep 10022` でSSHポートがリスニングしているか確認します。&#xa;   ===&#xa;   [root@localhost ~]# ss -tuln | grep 10022&#xa;   tcp    LISTEN     0      128       *:10022                 *:*&#xa;   tcp    LISTEN     0      128    [::]:10022              [::]:*&#xa;   ===&#xa;   tcp LISTEN 0 128 *:10022 *:*: これはIPv4アドレスでSSHサーバがポート10022でリスニングしていることを示しています。&#xa;   tcp LISTEN 0 128 [::]:10022 [::]:*: これはIPv6アドレスでSSHサーバがポート10022でリスニングしていることを示しています。&#xa;&#xa;&#xa;3. **SSHアクセスログの確認**:&#xa;   - `sudo journalctl -u sshd` を実行してSSHのアクセスログを確認します。&#xa;   ===&#xa;   [root@localhost ~]# journalctl -u sshd&#xa;   -- Logs begin at 木 2023-12-28 14:40:23 JST, end at 金 2023-12-29 15:37:12 JST. --&#xa;   12月 29 13:51:01 localhost.localdomain systemd[1]: Starting OpenSSH server daemon...&#xa;   12月 29 13:51:02 localhost.localdomain sshd[1125]: Server listening on 0.0.0.0 port 22.&#xa;   12月 29 13:51:02 localhost.localdomain sshd[1125]: Server listening on :: port 22.&#xa;   12月 29 13:51:02 localhost.localdomain systemd[1]: Started OpenSSH server daemon.&#xa;   12月 29 13:52:03 localhost.localdomain sshd[1650]: Accepted password for admin from 192.168.230.1 port 60614 ssh2&#xa;   12月 29 15:37:12 localhost.localdomain systemd[1]: Stopping OpenSSH server daemon...&#xa;   12月 29 15:37:12 localhost.localdomain systemd[1]: Stopped OpenSSH server daemon.&#xa;   12月 29 15:37:12 localhost.localdomain systemd[1]: Starting OpenSSH server daemon...&#xa;   12月 29 15:37:12 localhost.localdomain sshd[2422]: Server listening on 0.0.0.0 port 10022.&#xa;   12月 29 15:37:12 localhost.localdomain sshd[2422]: Server listening on :: port 10022.&#xa;   12月 29 15:37:12 localhost.localdomain sshd[2422]: Server listening on 0.0.0.0 port 22.&#xa;   12月 29 15:37:12 localhost.localdomain sshd[2422]: Server listening on :: port 22.&#xa;   12月 29 15:37:12 localhost.localdomain systemd[1]: Started OpenSSH server daemon.&#xa;   ===" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="11" y="196.79" width="780" height="1173" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="cSdYDNsyQWn_zRzjIRta" name="DNS">
    <mxGraphModel dx="1647" dy="839" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="7tC5FyxkFxibnzimmtPk-1" value="### 1. BINDとbind-chrootのインストール&#xa;    ===&#xa;    [root@localhost ~]# yum install bind bind-chroot&#xa;    読み込んだプラグイン:fastestmirror&#xa;    Determining fastest mirrors&#xa;     * base: ftp.tsukuba.wide.ad.jp&#xa;     * extras: ftp.tsukuba.wide.ad.jp&#xa;     * updates: ftp.tsukuba.wide.ad.jp&#xa;    総ダウンロード容量: 7.0 M&#xa;    インストール容量: 18 M&#xa;    Is this ok [y/d/N]: y&#xa;&#xa;&#xa;    ===&#xa;    bind：DNS&#xa;    bind-chroot：chroot環境&#xa;    bind-libs：ライブラリ&#xa;    bind-utils：dig hos nslookup等&#xa;&#xa;### 2. named.confファイルの編集&#xa;- `named.conf` にゾーン設定を追加します&#xa;    ### 1. `named.conf` ファイルの編集&#xa;    `named.conf` はBINDの主要な設定ファイルで、通常 `/etc/named.conf` に位置しています。&#xa;    このファイルを編集する前に、変更前の状態をバックアップしておくことをお勧めする。&#xa;    ===&#xa;    [root@localhost ~]# cp -p /etc/named.conf /etc/named.conf.backup&#xa;    ===&#xa;    -  `-p`：は属性もコピーします。&#xa;&#xa;    次に、テキストエディタ（例えば `vi`）を使用して `named.conf` を編集します。&#xa;    ===&#xa;    [root@localhost ~]# vi /etc/named.conf&#xa;    &lt;&lt;&lt;中略&gt;&gt;&gt;&#xa;    options {&#xa;        listen-on port 53 { any; };&#xa;        listen-on-v6 port 53 { any; };&#xa;        directory       &quot;/var/named&quot;;&#xa;        dump-file       &quot;/var/named/data/cache_dump.db&quot;;&#xa;        statistics-file &quot;/var/named/data/named_stats.txt&quot;;&#xa;        memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;&#xa;        recursing-file  &quot;/var/named/data/named.recursing&quot;;&#xa;        secroots-file   &quot;/var/named/data/named.secroots&quot;;&#xa;        allow-query     { any;};&#xa;    ===&#xa;&#xa;&#xa;    ### 2. ゾーン設定の追加&#xa;    `named.conf` の適切なセクションにゾーン設定を追加します。&#xa;    例として、`example.com` ドメインのゾーン設定は以下のようになります。&#xa;    ===&#xa;    zone &quot;test.i2c.com&quot; IN {&#xa;        type master;&#xa;        file &quot;test.i2c.com.zone&quot;;&#xa;        allow-query { localnets; };&#xa;    };&#xa;    ===&#xa;    - `type master;`: このゾーンがマスター（原本）であることを指定します。&#xa;    - `file &quot;example.com.zone&quot;;`: このゾーンのデータが保存されているファイル名を指定します。&#xa;    - `allow-query { localnets; };`: ローカルネットワークからの問い合わせのみを許可します。&#xa;    ここで逆引きゾーンも設定する場合は逆引きのファイルも作成することにより、次のステップのnamedのリスタート時にエラーが発生しなくなります。&#xa;&#xa;    ### 4. 設定の検証とサービスの再起動&#xa;    設定を変更した後は、必ず設定ファイルの構文を検証してください。&#xa;    エラーがなければ、BINDサービスを再起動して変更を適用します。&#xa;    ===&#xa;    [root@localhost ~]#named-checkconf&#xa;    [root@localhost ~]#systemctl restart named&#xa;    ======&#xa;&#xa;### 3. 正引きゾーンファイルの作成&#xa;- `/var/named/` にゾーンファイルを作成します。&#xa;- Aレコード、CNAMEレコード、MXレコード、NSレコードを登録します。&#xa;&#xa;正引きゾーンファイルを作成するには、`/var/named/` ディレクトリにゾーンファイル（この例では `example.com.zone`）を作成し、&#xa;その中にDNSレコード（Aレコード、CNAMEレコード、MXレコード、NSレコード）を定義します。&#xa;以下は `example.com` ドメインのための基本的なゾーンファイルの例です。&#xa;### ゾーンファイル `example.com.zone` の作成&#xa;    1. **ゾーンファイルの作成**:&#xa;       ===&#xa;       sudo vi /var/named/test.i2c.com.zone&#xa;       ===&#xa;&#xa;    2. **ゾーンファイルの内容**:&#xa;       ===&#xa;       $TTL 86400&#xa;       @   IN  SOA ns1.test.i2c.com. root.test.i2c.com. (&#xa;               2023122901  ; Serial&#xa;               3600        ; Refresh&#xa;               1800        ; Retry&#xa;               604800      ; Expire&#xa;               86400       ; Minimum TTL&#xa;       )&#xa;               IN  NS     ns1.test.i2c.com.&#xa;       ns1     IN  A      192.168.230.134&#xa;       @       IN  A      192.168.230.100&#xa;       www     IN  CNAME  @&#xa;       @       IN  MX 10  mail.test.i2c.com.&#xa;       mail    IN  A      192.168.230.101&#xa;       ===&#xa;&#xa;    3. **ゾーンファイルの構文チェック**:&#xa;       - ゾーンファイルを保存した後、以下のコマンドで構文をチェックします。&#xa;         ===&#xa;         [root@localhost ~]# named-checkzone test.i2c.com /var/named/test.i2c.com.zone&#xa;         zone example.com/IN: loaded serial 2023122901&#xa;         OK&#xa;         ===&#xa;&#xa;    4. **BINDサービスの再起動**:&#xa;       - 設定を反映させるためにBINDサービスを再起動します。&#xa;         ===&#xa;         sudo systemctl restart named&#xa;         ===&#xa;&#xa;### 4. 逆引きゾーンファイルの作成&#xa;- `/var/named/` に逆引きゾーンファイルを作成します。&#xa;- PTRレコードを登録します。&#xa;逆引きゾーンファイルを作成する際、PTR（ポインタ）レコードを使用してIPアドレスを対応するホスト名にマッピングします。&#xa;逆引きゾーンは、特定のIPアドレス範囲の逆引きDNSルックアップ用に設計されます。以下に一般的な手順と例を示します。&#xa;&#xa;    ### 逆引きゾーンファイルの作成手順&#xa;    1. **逆引きゾーンファイルの作成**:&#xa;       - `/var/named/` ディレクトリ内に逆引きゾーンファイルを作成します。ファイル名は通常、対象のIPアドレス範囲に基づいて命名されます。&#xa;         例えば、`192.168.230.0/24` ネットワーク用の逆引きゾーンファイル名は `230.168.192.in-addr.arpa.zone` となることが多い。&#xa;         ===&#xa;         zone &quot;230.168.192.in-addr.arpa&quot; IN {&#xa;                 type master;&#xa;                 file &quot;230.168.192.in-addr.arpa.zone&quot;;&#xa;                 allow-update { none; };&#xa;         };&#xa;         [root@localhost ~]# vi /etc/named.conf&#xa;         [root@localhost ~]# named-checkconf&#xa;         ===&#xa;&#xa;    2. **逆引きゾーンファイルの内容**:&#xa;       - ゾーンファイルの基本的な構造は正引きゾーンファイルに似ていますが、PTRレコードを使用します。&#xa;       - 以下に、`192.168.2.0/24` ネットワーク用の逆引きゾーンファイルの例を示します。&#xa;&#xa;         ===&#xa;         [root@localhost ~]# vi /var/named/230.168.192.in-addr.arpa.zone&#xa;         $TTL 86400&#xa;         @   IN  SOA ns1.test.i2c.com. root.test.i2c.com. (&#xa;                 2023122901  ; Serial&#xa;                 3600        ; Refresh&#xa;                 1800        ; Retry&#xa;                 604800      ; Expire&#xa;                 86400 )     ; Minimum TTL&#xa;         ;&#xa;&#xa;                 IN  NS  ns1.test.i2c.com.&#xa;         134    IN  PTR ns1.test.i2c.com.&#xa;         100    IN  PTR test.i2c.com.&#xa;         101    IN  PTR mail.test.i2c.com.&#xa;         ===&#xa;&#xa;    3. **構文チェック**:&#xa;       - `named-checkzone` コマンドを使用して逆引きゾーンファイルの構文をチェックします。&#xa;         ===&#xa;         named-checkzone 230.168.192.in-addr.arpa /var/named/230.168.192.in-addr.arpa.zone&#xa;         ===&#xa;&#xa;&#xa;    4. **サービスの再起動**:&#xa;       - 設定を適用するためにBINDサービスを再起動します。&#xa;         ===&#xa;         systemctl restart named&#xa;         ===&#xa;&#xa;### 5. BINDサービスの開始と自動起動の設定&#xa;===&#xa;systemctl start named&#xa;systemctl enable named&#xa;===&#xa;&#xa;### 6. FirewalldでDNSポートを開放&#xa;===&#xa;firewall-cmd --permanent --add-service=dns&#xa;firewall-cmd --reload&#xa;===&#xa;&#xa;### 7. BINDサービスの状態確認&#xa;===&#xa;[root@localhost ~]# systemctl status named&#xa;● named.service - Berkeley Internet Name Domain (DNS)&#xa;   Loaded: loaded (/usr/lib/systemd/system/named.service; enabled; vendor preset: disabled)&#xa;   Active: active (running) since 土 2023-12-30 07:28:02 JST; 13min ago&#xa;  Process: 19102 ExecStop=/bin/sh -c /usr/sbin/rndc stop &gt; /dev/null 2&gt;&amp;1 || /bin/kill -TERM $MAINPID (code=exited, status=0/SUCCESS)&#xa;  Process: 19114 ExecStart=/usr/sbin/named -u named -c ${NAMEDCONF} $OPTIONS (code=exited, status=0/SUCCESS)&#xa;  Process: 19112 ExecStartPre=/bin/bash -c if [ ! &quot;$DISABLE_ZONE_CHECKING&quot; == &quot;yes&quot; ]; then /usr/sbin/named-checkconf -z &quot;$NAMEDCONF&quot;; else echo &quot;Checking of zone files is disabled&quot;; fi (code=exited, status=0/SUCCESS)&#xa; Main PID: 19116 (named)&#xa;   CGroup: /system.slice/named.service&#xa;           mq19116 /usr/sbin/named -u named -c /etc/named.conf&#xa;&#xa;&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: RRSIG validity period has not begun resolving &#39;com/DS/IN&#39;: 170.247.170.2#53&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: validating com/DS: verify failed due to bad signature (keyid=46780): RRSIG validity period has not begun&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: validating com/DS: no valid signature found&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: RRSIG validity period has not begun resolving &#39;com/DS/IN&#39;: 192.58.128.30#53&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: validating com/DS: verify failed due to bad signature (keyid=46780): RRSIG validity period has not begun&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: validating com/DS: no valid signature found&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: RRSIG validity period has not begun resolving &#39;com/DS/IN&#39;: 199.7.83.42#53&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: no valid DS resolving &#39;www.google.com/A/IN&#39;: 216.239.38.10#53&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: validating www.google.com/A: bad cache hit (com/DS)&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: broken trust chain resolving &#39;www.google.com/A/IN&#39;: 216.239.36.10#53&#xa;===&#xa;&#xa;### 8. BINDのポート確認&#xa;===&#xa;[root@localhost ~]# ss -tuln | grep 53&#xa;udp    UNCONN     0      0      192.168.230.130:53                    *:*&#xa;udp    UNCONN     0      0      127.0.0.1:53                    *:*&#xa;udp    UNCONN     0      0      [::]:53                 [::]:*&#xa;tcp    LISTEN     0      10     192.168.230.130:53                    *:*&#xa;tcp    LISTEN     0      10     127.0.0.1:53                    *:*&#xa;tcp    LISTEN     0      128    127.0.0.1:953                   *:*&#xa;tcp    LISTEN     0      10     [::]:53                 [::]:*&#xa;tcp    LISTEN     0      128       [::1]:953                [::]:*&#xa;===&#xa;&#xa;### 9. BIND関連のエラー確認&#xa;===&#xa;sudo journalctl -u named&#xa;===&#xa;&#xa;### 10. nmtuiでDNS関連の設定&#xa;最後に自動的に取得されたDNSパラメーターを無視にチェック&#xa;===&#xa;systemctl restart NetworkManager&#xa;===&#xa;&#xa;### 11. /etc/resolv.conf編集&#xa;===&#xa;# Generated by NetworkManager&#xa;search ns1.test.i2c.jp test.i2c.com&#xa;nameserver 192.168.230.134&#xa;===&#xa;&#xa;### 12. 確認&#xa;&#xa;&#xa;    ===&#xa;    [root@localhost ~]# nslookup www.test.i2c.com&#xa;    Server:         127.0.0.1&#xa;    Address:        127.0.0.1#53&#xa;&#xa;&#xa;    www.example.com canonical name = example.com.&#xa;    Name:   example.com&#xa;    Address: 192.168.2.100&#xa;&#xa;&#xa;    [root@localhost ~]# nslookup 192.168.230.134&#xa;    100.2.168.192.in-addr.arpa      name = example.com.&#xa;&#xa;&#xa;    [root@localhost ~]# dig www.test.i2c.com&#xa;&#xa;&#xa;    ; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.15 &lt;&lt;&gt;&gt; www.example.com&#xa;    ;; global options: +cmd&#xa;    ;; Got answer:&#xa;    ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 49535&#xa;    ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 2&#xa;&#xa;&#xa;    ;; OPT PSEUDOSECTION:&#xa;    ; EDNS: version: 0, flags:; udp: 4096&#xa;    ;; QUESTION SECTION:&#xa;    ;www.example.com.               IN      A&#xa;&#xa;&#xa;    ;; ANSWER SECTION:&#xa;    www.example.com.        86400   IN      CNAME   example.com.&#xa;    example.com.            86400   IN      A       192.168.2.100&#xa;&#xa;&#xa;    ;; AUTHORITY SECTION:&#xa;    example.com.            86400   IN      NS      ns1.example.com.&#xa;&#xa;&#xa;    ;; ADDITIONAL SECTION:&#xa;    ns1.example.com.        86400   IN      A       192.168.2.1&#xa;&#xa;&#xa;    ;; Query time: 0 msec&#xa;    ;; SERVER: 127.0.0.1#53(127.0.0.1)&#xa;    ;; WHEN: 土 12月 30 07:26:48 JST 2023&#xa;    ;; MSG SIZE  rcvd: 108&#xa;&#xa;&#xa;    [root@localhost ~]# dig -x 192.168.230.134&#xa;&#xa;&#xa;    ; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.15 &lt;&lt;&gt;&gt; -x 192.168.2.1&#xa;    ;; global options: +cmd&#xa;    ;; Got answer:&#xa;    ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 21599&#xa;    ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 2&#xa;&#xa;&#xa;    ;; OPT PSEUDOSECTION:&#xa;    ; EDNS: version: 0, flags:; udp: 4096&#xa;    ;; QUESTION SECTION:&#xa;    ;1.2.168.192.in-addr.arpa.      IN      PTR&#xa;&#xa;&#xa;    ;; ANSWER SECTION:&#xa;    1.2.168.192.in-addr.arpa. 86400 IN      PTR     ns1.example.com.&#xa;&#xa;&#xa;    ;; AUTHORITY SECTION:&#xa;    2.168.192.in-addr.arpa. 86400   IN      NS      ns1.example.com.&#xa;&#xa;&#xa;    ;; ADDITIONAL SECTION:&#xa;    ns1.example.com.        86400   IN      A       192.168.2.1&#xa;&#xa;&#xa;    ;; Query time: 1 msec&#xa;    ;; SERVER: 127.0.0.1#53(127.0.0.1)&#xa;    ;; WHEN: 土 12月 30 07:10:16 JST 2023&#xa;    ;; MSG SIZE  rcvd: 112&#xa;    ===" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="40" y="39" width="1387" height="5577" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="Kn_N7devSe5hCH_kUH9X" name="Apache">
    <mxGraphModel dx="1647" dy="839" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="hrIiPlVvqsmxAArQOzFZ-1" value="Apache Webサーバのインストールと設定に関するタスクを分解して説明します。以下に、各ステップの詳細とそれぞれの実行方法を示します。&#xa;&#xa;&#xa;### 1. Apacheのインストール&#xa;-Apache（httpd）をインストールします。&#xa;  ===&#xa;  yum install httpd&#xa;  ===&#xa;&#xa;&#xa;### 2. Firewalldで必要なポートを開ける&#xa;- HTTP（80）とHTTPS（443）のポートを開放します。&#xa;  ===&#xa;  [root@localhost ~]# firewall-cmd --permanent --add-service=http&#xa;  success&#xa;  [root@localhost ~]# firewall-cmd --permanent --add-service=https&#xa;  success&#xa;  [root@localhost ~]#&#xa;  [root@localhost ~]# firewall-cmd --reload&#xa;  ===&#xa;&#xa;&#xa;### 3. Apacheの基本設定&#xa;&#xa;&#xa;#### 3.1 通常アクセスの確認&#xa;- Apacheを起動して、デフォルトページにアクセスできるかを確認します。&#xa;  ===&#xa;  [root@localhost ~]# systemctl start httpd&#xa;  [root@localhost ~]# systemctl enable httpd&#xa;  Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.&#xa;  ===&#xa;&#xa;&#xa;#### 3.2 セキュリティ設定&#xa;- **デフォルトページの削除または変更**:&#xa;  - `welcome.conf` の内容をコメントアウトまたは削除します。&#xa;  ===&#xa;  vi /etc/httpd/conf.d/welcome.conf&#xa;  #&lt;LocationMatch &quot;^/+$&quot;&gt;&#xa;  #    Options -Indexes&#xa;  #    ErrorDocument 403 /.noindex.html&#xa;  #&lt;/LocationMatch&gt;&#xa;  ===&#xa;  &#xa;  - 自分で作成したテストページを `/var/www/html/` に設置します。&#xa;  ===&#xa;  vi /var/www/html/index.html&#xa;  &lt;html&gt;&#xa;  &lt;body&gt;&#xa;  &lt;div style=&quot;width: 100%; font-size: 40px; font-weight: bold; text-align: center;&quot;&gt;&#xa;  Test Page&#xa;  &lt;/div&gt;&#xa;  &lt;/body&gt;&#xa;  &lt;/html&gt;&#xa;  ===&#xa;&#xa;- **Apacheバージョン情報の非表示**:&#xa;  - `httpd.conf` ファイルに `ServerTokens Prod` を追加します。&#xa;  ===&#xa;  vi /etc/httpd/conf/httpd.conf&#xa;  ===&#xa;  目的&#xa;  Apacheバージョン情報の非表示の主な目的は、サーバのセキュリティを強化することです。&#xa;  理由&#xa;  情報漏洩の最小化&#xa;  WebサーバがHTTPレスポンスヘッダーにバージョン情報やOSの詳細を含むと、攻撃者による情報収集が容易になります。攻撃者はこの情報を利用して、特定のバージョンに特有の既知の脆弱性を悪用することができます。&#xa;&#xa;&#xa;- **ディレクトリリスティングの無効化**:&#xa;  - `Options -Indexes` を設定ファイルに追加します。&#xa;  ===&#xa;  &lt;Directory &quot;/var/www/cgi-bin&quot;&gt;&#xa;      AllowOverride None&#xa;      Options None # Noneになっていたら変更要らない。&#xa;      Require all granted&#xa;  &lt;/Directory&gt;&#xa;  ===&#xa;  目的&#xa;  ディレクトリリスティングを無効にすることで、Webサーバー上のディレクトリ構造やファイルリストが外部から参照されるのを防ぎます。&#xa;&#xa;- **クリックジャッキング対策**:&#xa;  - `Header always append X-Frame-Options DENY` を設定ファイルに追加します。&#xa;&#xa;&#xa;- **TRACEメソッドの無効化**:&#xa;  - `TraceEnable off` を設定ファイルに追加します。&#xa;  目的&#xa;  Apache WebサーバでのHTTP TRACEメソッドの無効化は、セキュリティを強化し、クロスサイトトレーシング (XST) 攻撃を防ぐために行われます。&#xa;  クロスサイトトレーシング (XST) 攻撃とは&#xa;  XST攻撃:&#xa;  クロスサイトトレーシング攻撃は、WebサーバのHTTP TRACEメソッドを悪用して、ユーザーのセッション情報やその他の機密情報を盗む攻撃です。&#xa;&#xa;#### 3.3 BASIC認証設定&#xa;- `.htaccess` ファイルを使用してBASIC認証を設定します。&#xa;&#xa;#### BASIC認証の設定方法&#xa;&#xa;BASIC認証を設定することで、Apache Webサーバー上の特定のディレクトリへのアクセスを制限し、ユーザー名とパスワードによる認証を要求します。&#xa;これは、特定のリソースへのアクセスを制御する簡易的な方法です。&#xa;&#xa;### 手順&#xa;&#xa;1. **認証用ユーザーファイルの作成**:&#xa;   - `htpasswd` ユーティリティを使用して、認証に使用するユーザー名とパスワードを含むファイルを作成します。例えば、`/etc/httpd/.htpasswd` というファイルにユーザーを追加する場合:&#xa;     ===&#xa;     htpasswd -c /etc/httpd/conf/.htpasswd admin&#xa;     　パスワード入力&#xa;     　パスワード再入力&#xa;     ===&#xa;&#xa;2. **`.htaccess` ファイルの作成**:&#xa;   - BASIC認証を適用したいディレクトリに `.htaccess` ファイルを作成します。&#xa;   - 以下の内容を `.htaccess` ファイルに追加します:&#xa;     ===&#xa;     vi /etc/httpd/conf/httpd.conf&#xa;     &lt;Directory &quot;/var/www/html&quot;&gt;&#xa;           AuthUserFile /etc/httpd/conf/.htpasswd&#xa;           AuthGroupFile /dev/null&#xa;           AuthName &quot;Basic Auth&quot;&#xa;           AuthType Basic&#xa;           Require valid-user&#xa;           AllowOverride All&#xa;     &lt;/Directory&gt;&#xa;     ===&#xa;&#xa;3. **Apacheの設定の確認**:&#xa;   - Apacheが `.htaccess` ファイルを使用するように設定されていることを確認します。&#xa;     Apacheのメイン設定ファイル（`httpd.conf`）を編集し、対象のディレクトリの `&lt;Directory&gt;` セクションに `AllowOverride All` を設定します。&#xa;     ===&#xa;     &lt;Directory &quot;/var/www/html&quot;&gt;&#xa;         AllowOverride All&#xa;     &lt;/Directory&gt;&#xa;     ===&#xa;     ここで `/var/www/html` は `.htaccess` ファイルが存在するディレクトリに置き換えてください。&#xa;&#xa;4. **Apacheの再起動**:&#xa;   - 設定を有効にするために、Apacheを再起動します。&#xa;     ===&#xa;     systemctl restart httpd&#xa;     ===&#xa;https://www.server-world.info/query?os=CentOS_7&amp;p=httpd&amp;f=8&#xa;&#xa;#### 3.4 名前ベースのVirtualHost設定&#xa;- 複数のドメインに対応するVirtualHostを `httpd.conf` または関連する設定ファイルに設定します。&#xa;&#xa;あまり興味がないのでパス&#xa;&#xa;#### 3.5 SSL設定&#xa;- 自己署名証明書を作成し、SSL設定を `httpd.conf` に追加します。&#xa;&#xa;===&#xa;[root@localhost ~]# mkdir -p /etc/ssl/private&#xa;[root@localhost ~]# chmod 700 /etc/ssl/private&#xa;[root@localhost ~]# sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/server.key -out /etc/ssl/certs/server.crt&#xa;Generating a 2048 bit RSA private key&#xa;........................................+++&#xa;............................+++&#xa;writing new private key to &#39;/etc/ssl/private/server.key&#39;&#xa;-----&#xa;You are about to be asked to enter information that will be incorporated&#xa;into your certificate request.&#xa;What you are about to enter is what is called a Distinguished Name or a DN.&#xa;There are quite a few fields but you can leave some blank&#xa;For some fields there will be a default value,&#xa;If you enter &#39;.&#39;, the field will be left blank.&#xa;-----&#xa;Country Name (2 letter code) [XX]:JP&#xa;State or Province Name (full name) []:Osaka&#xa;Locality Name (eg, city) [Default City]:Osaka&#xa;Organization Name (eg, company) [Default Company Ltd]:i2c.jp&#xa;Organizational Unit Name (eg, section) []:&#xa;Common Name (eg, your name or your server&#39;s hostname) []:www.test.i2c.com&#xa;Email Address []:admin@test.i2c.com&#xa;[root@localhost ~]#&#xa;[root@localhost ~]# yum install mod_ssl&#xa;[root@localhost ~]# systemctl restart httpd&#xa;[root@localhost ~]# sudo systemctl status httpd&#xa;● httpd.service - The Apache HTTP Server&#xa;   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled)&#xa;   Active: active (running) since 日 2023-12-31 20:05:05 JST; 2s ago&#xa;     Docs: man:httpd(8)&#xa;           man:apachectl(8)&#xa;  Process: 30440 ExecStop=/bin/kill -WINCH ${MAINPID} (code=exited, status=0/SUCCESS)&#xa; Main PID: 30445 (httpd)&#xa;   Status: &quot;Processing requests...&quot;&#xa;   CGroup: /system.slice/httpd.service&#xa;           tq30445 /usr/sbin/httpd -DFOREGROUND&#xa;           tq30446 /usr/sbin/httpd -DFOREGROUND&#xa;           tq30447 /usr/sbin/httpd -DFOREGROUND&#xa;           tq30448 /usr/sbin/httpd -DFOREGROUND&#xa;           tq30449 /usr/sbin/httpd -DFOREGROUND&#xa;           mq30450 /usr/sbin/httpd -DFOREGROUND&#xa;&#xa;12月 31 20:05:05 ns1.test.i2c.com systemd[1]: Stopped The Apache HTTP Server.&#xa;12月 31 20:05:05 ns1.test.i2c.com systemd[1]: Starting The Apache HTTP Server...&#xa;12月 31 20:05:05 ns1.test.i2c.com systemd[1]: Started The Apache HTTP Server.&#xa;===&#xa;&#xa;実際にhttps:://&lt;作成したサイト&gt;でデバックツールを使ってみることで、どんな証明書でどのような通信が行われているか確認します。&#xa;===&#xa;Request URL:https://192.168.230.134/&#xa;Request Method:GET&#xa;Status Code:200 OK&#xa;Remote Address:192.168.230.134:443&#xa;Referrer Policy:strict-origin-when-cross-origin&#xa;&#xa;一般名（CN）    ns1.test.i2c.com&#xa;組織（O）    SomeOrganization&#xa;組織単位（OU）    SomeOrganizationalUnit&#xa;&#xa;===&#xa;&#xa;### 4. サービス・ポート・ログの確認&#xa;&#xa;&#xa;#### 4.1 サービスの確認&#xa;- Apacheが正常に稼働していることを確認します。&#xa;  ===&#xa;  sudo systemctl status httpd&#xa;  ===&#xa;&#xa;&#xa;#### 4.2 ポートの確認&#xa;- Apacheが80番ポートと443番ポートでリスニングしていることを確認します。&#xa;  ===&#xa;  sudo ss -tuln | grep &#39;:80\|:443&#39;&#xa;  ===&#xa;&#xa;&#xa;#### 4.3 ログの確認&#xa;- Apacheのアクセスログが `/var/log/httpd/access_log` に出力されていることを確認します。&#xa;===&#xa;[root@localhost ~]# cat /var/log/httpd/access_log | tail&#xa;192.168.230.1 - admin [31/Dec/2023:16:51:26 +0900] &quot;GET / HTTP/1.1&quot; 500 527 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;&#xa;192.168.230.1 - admin [31/Dec/2023:16:51:26 +0900] &quot;GET / HTTP/1.1&quot; 500 527 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;&#xa;192.168.230.1 - - [31/Dec/2023:16:57:04 +0900] &quot;GET / HTTP/1.1&quot; 401 381 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;&#xa;192.168.230.1 - admin2 [31/Dec/2023:16:57:08 +0900] &quot;GET / HTTP/1.1&quot; 500 527 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;&#xa;192.168.230.1 - - [31/Dec/2023:16:58:46 +0900] &quot;GET / HTTP/1.1&quot; 401 381 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;&#xa;192.168.230.1 - admin2 [31/Dec/2023:16:58:50 +0900] &quot;GET / HTTP/1.1&quot; 500 527 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;&#xa;192.168.230.1 - - [31/Dec/2023:18:20:54 +0900] &quot;GET / HTTP/1.1&quot; 401 381 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;&#xa;192.168.230.1 - admin [31/Dec/2023:18:20:57 +0900] &quot;GET / HTTP/1.1&quot; 200 130 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;&#xa;192.168.230.1 - - [31/Dec/2023:20:05:21 +0900] &quot;GET / HTTP/1.1&quot; 401 381 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;&#xa;192.168.230.1 - admin [31/Dec/2023:20:05:25 +0900] &quot;GET / HTTP/1.1&quot; 200 130 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;&#xa;===" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="87" y="59" width="1344" height="3594" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="5PnY9wTJwm_BW4FCFA2g" name="tomcat">
    <mxGraphModel dx="1647" dy="839" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="s-RK6Ms0ESVJJzsUwe0O-1" value="Tomcatのインストールと設定は、以下のステップに従って行います。&#xa;このプロセスは、TomcatをWebアプリケーションサーバーとして設定し、Apache Webサーバーと連携させる方法を含みます。&#xa;&#xa;&#xa;### 1. Tomcatのインストール&#xa;&#xa;&#xa;1. **Tomcatのダウンロード**:&#xa;   - Tomcatの公式サイト（[Apache Tomcat](https://tomcat.apache.org/)）から最新版のTomcatをダウンロードします。&#xa;&#xa;&#xa;2. **Tomcatのインストール**:&#xa;   - ダウンロードしたTomcatを適切なディレクトリ（例：`/opt/tomcat`）に解凍します。&#xa;&#xa;&#xa;### 2. Tomcatサービスの登録&#xa;&#xa;&#xa;1. **systemdサービスファイルの作成**:&#xa;   - `/etc/systemd/system/tomcat.service` にTomcatのサービスファイルを作成します。&#xa;   - 以下はサービスファイルの一例です：&#xa;     ```ini&#xa;     [Unit]&#xa;     Description=Apache Tomcat Web Application Container&#xa;     After=network.target&#xa;&#xa;&#xa;     [Service]&#xa;     Type=forking&#xa;&#xa;&#xa;     Environment=JAVA_HOME=/usr/lib/jvm/jre&#xa;     Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid&#xa;     Environment=CATALINA_HOME=/opt/tomcat&#xa;     Environment=CATALINA_BASE=/opt/tomcat&#xa;     ExecStart=/opt/tomcat/bin/startup.sh&#xa;     ExecStop=/opt/tomcat/bin/shutdown.sh&#xa;&#xa;&#xa;     User=tomcat&#xa;     Group=tomcat&#xa;     UMask=0007&#xa;     RestartSec=10&#xa;     Restart=always&#xa;&#xa;&#xa;     [Install]&#xa;     WantedBy=multi-user.target&#xa;     ```&#xa;   - `JAVA_HOME` はJavaのインストールパスに置き換えてください。&#xa;   - `User` と `Group` はTomcatを実行するユーザーとグループです。&#xa;&#xa;&#xa;2. **サービスの有効化と起動**:&#xa;   - 新しく作成したサービスを有効化し、起動します：&#xa;     ```bash&#xa;     sudo systemctl daemon-reload&#xa;     sudo systemctl start tomcat&#xa;     sudo systemctl enable tomcat&#xa;     ```&#xa;&#xa;&#xa;### 3. Tomcatセキュリティ対策&#xa;&#xa;&#xa;1. **クリックジャッキング対策**:&#xa;   - Tomcatの `web.xml` ファイル（通常は `/opt/tomcat/conf/web.xml` にあります）にHTTPヘッダーのセキュリティ対策を追加します。&#xa;   - 例えば、以下のように `X-Frame-Options` ヘッダーを追加してクリックジャッキングを防ぎます：&#xa;     ```xml&#xa;     &lt;filter&gt;&#xa;       &lt;filter-name&gt;httpHeaderSecurity&lt;/filter-name&gt;&#xa;       &lt;filter-class&gt;org.apache.catalina.filters.HttpHeaderSecurityFilter&lt;/filter-class&gt;&#xa;       &lt;init-param&gt;&#xa;         &lt;param-name&gt;xframeOptions&lt;/param-name&gt;&#xa;         &lt;param-value&gt;DENY&lt;/param-value&gt;&#xa;       &lt;/init-param&gt;&#xa;     &lt;/filter&gt;&#xa;     &lt;filter-mapping&gt;&#xa;       &lt;filter-name&gt;httpHeaderSecurity&lt;/filter-name&gt;&#xa;       &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&#xa;     &lt;/filter-mapping&gt;&#xa;     ```&#xa;&#xa;&#xa;### 4. ApacheとTomcatの連携設定&#xa;&#xa;&#xa;1. **mod_jkのインストール**:&#xa;   - ApacheとTomcatを連携させるために、`mod_jk` または `mod_proxy` モジュールを使用します。&#xa;   - CentOSでは `mod_jk` モジュールを次のようにインストールできます：&#xa;     ```bash&#xa;     sudo yum install mod_jk&#xa;     ```&#xa;&#xa;&#xa;2. **連携設定の追加**:&#xa;   - Apacheの設定ファイル（`httpd.conf`）に、Tomcatとの連携に関する設定を追加します。&#xa;   - 例えば、`mod_jk` を使用する場合は、`workers.properties` ファイルを設定し、`httpd.conf` に以下のような設定を追加します：&#xa;     ```apache&#xa;     JkWorkersFile /etc/httpd/conf/workers.properties&#xa;     JkLogFile /var/log/httpd/mod_jk.log&#xa;     JkLogLevel info&#xa;     JkMount /tomcat8/* worker1&#xa;     ```&#xa;&#xa;&#xa;### 5. サービス・ポート・ログの確認&#xa;&#xa;&#xa;1. **Tomcatサービスの状態確認**:&#xa;   - Tomcatのサービスが正常に動作しているか確認します：&#xa;     ```bash&#xa;     sudo systemctl status tomcat&#xa;     ```&#xa;&#xa;&#xa;2. **ポートの確認**:&#xa;   - `ss` コマンドを使用して、Tomcatがリッスンしているポート（デフォルトは8080）が開いているか確認します：&#xa;     ```bash&#xa;     ss -tuln | grep 8080&#xa;     ```&#xa;&#xa;&#xa;3. **アクセスログの確認**:&#xa;   - Tomcatのアクセスログは通常、`/opt/tomcat/logs` にあります。ログファイルを確認して、アクセスが適切に記録されているか確認します。" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="11" y="59" width="791" height="1936" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="Z_yRf29pnHGEDY_jvdqE" name="PostgreSQL">
    <mxGraphModel dx="1647" dy="839" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="OWyGcWS-MO3uc41Y_2xm-1" value="PostgreSQLのインストール&#xa;===&#xa;yum -y install postgresql-server&#xa;===&#xa;&#xa;&#xa;ファイアウォールにPostgreSQLサービスを追加&#xa;===&#xa;firewall-cmd --add-service=postgresql --permanent&#xa;firewall-cmd --reload&#xa;===&#xa;&#xa;&#xa;データベースの初期化&#xa;===&#xa;sudo postgresql-setup initdb&#xa;===&#xa;&#xa;&#xa;PostgreSQLサービスを起動し、システム起動時に自動的に起動するように設定&#xa;===&#xa;systemctl start postgresql&#xa;systemctl enable postgresql&#xa;===&#xa;&#xa;&#xa;Postgresユーザのパスワード設定&#xa;===&#xa;[root@localhost ~]# passwd postgres&#xa;ユーザー postgres のパスワードを変更。&#xa;新しいパスワード:postgres&#xa;よくないパスワード: このパスワードには一部に何らかの形でユーザー名が含まれています。&#xa;新しいパスワードを再入力してください:postgres&#xa;passwd: すべての認証トークンが正しく更新できました。&#xa;===&#xa;&#xa;&#xa;ユーザ変更&#xa;===&#xa;[root@localhost ~]# su - postgres&#xa;-bash-4.2$ ←プロンプトが変更される&#xa;===&#xa;&#xa;&#xa;PostgreSQLにパスワード設定&#xa;===&#xa;-bash-4.2$ psql -c &quot;alter user postgres with password &#39;postgres&#39;&quot;&#xa;ALTER ROLE ←パスワード更新終了&#xa;===&#xa;&#xa;&#xa;PostgreSQLにログイン、ログアウト&#xa;===&#xa;postgres=# psql&#xa;postgres-#&#xa;postgres-# \q&#xa;===&#xa;&#xa;&#xa;ユーザ作成&#xa;===&#xa;postgres=# \q&#xa;-bash-4.2$ createuser -P -d user01&#xa;新しいロールのためのパスワード:user01&#xa;もう一度入力してください：user01&#xa;===&#xa;&#xa;&#xa;ユーザ権限確認&#xa;===&#xa;-bash-4.2$ psql&#xa;psql (9.2.24)&#xa;&quot;help&quot; でヘルプを表示します.&#xa;&#xa;&#xa;postgres=#&#xa;postgres=# \du&#xa;                                         ロール一覧&#xa; ロール名 |                                 属性                                 | メンバー&#xa;----------+----------------------------------------------------------------------+----------&#xa; postgres | スーパーユーザ, ロールを作成できる, DBを作成できる, レプリケーション | {}&#xa; user01   | DBを作成できる                                                       | {}&#xa;===&#xa;&#xa;&#xa;現在のデータベースの確認&#xa;===&#xa;-bash-4.2$ psql -U postgres&#xa;psql (9.2.24)&#xa;&quot;help&quot; でヘルプを表示します.&#xa;postgres=# select current_database();&#xa; current_database&#xa;------------------&#xa; postgres&#xa;(1 行)&#xa;===&#xa;&#xa;&#xa;データベース作成&#xa;===&#xa;postgres=# create database sample;&#xa;CREATE DATABASE&#xa;===&#xa;&#xa;&#xa;データベースに再接続&#xa;===&#xa;postgres=# \c sample;&#xa;データベース &quot;sample&quot; にユーザ&quot;postgres&quot;として接続しました。&#xa;===&#xa;&#xa;&#xa;テーブル作成&#xa;===&#xa;sample=# create table test&#xa;sample-# (&#xa;sample(# id int8,&#xa;sample(# name char(010)&#xa;sample(# );&#xa;CREATE TABLE&#xa;===&#xa;&#xa;&#xa;テーブル確認&#xa;===&#xa;sample=# \d&#xa;          リレーションの一覧&#xa; スキーマ | 名前 |    型    |  所有者&#xa;----------+------+----------+----------&#xa; public   | test | テーブル | postgres&#xa;(1 行)&#xa;===&#xa;&#xa;&#xa;テーブルから抜ける&#xa;===&#xa;-bash-4.2$ exit&#xa;===" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="34" y="34" width="717" height="2008" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="gUsqvkG3pI4Ej1aK13hC" name="MAIL‗Postfix‗Dovecot">
    <mxGraphModel dx="1063" dy="541" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="DP3wMyDhrnEVlTMMfaDP-1" value="DNSの設定は下記の通り&#xa;===&#xa;[root@testi2c ~]# vi /etc/named.conf&#xa;zone &quot;test.i2c.com&quot; IN {&#xa;        type master;&#xa;        file &quot;test.i2c.com.zone&quot;;&#xa;        allow-query {any;};&#xa;};&#xa;&#xa;&#xa;zone &quot;230.168.192.in-addr.arpa&quot; IN {&#xa;        type master;&#xa;        file &quot;230.168.192.in-addr.arpa.zone&quot;;&#xa;        allow-update { none; };&#xa;};&#xa;&#xa;&#xa;[root@testi2c ~]# vi /var/named/test.i2c.com.zone&#xa;$TTL 86400&#xa;@   IN  SOA ns1.test.i2c.com. root.test.i2c.com. (&#xa;        2023122901  ; Serial&#xa;        3600        ; Refresh&#xa;        1800        ; Retry&#xa;        604800      ; Expire&#xa;        86400       ; Minimum TTL&#xa;)&#xa;        IN  NS     ns1.test.i2c.com.&#xa;ns1     IN  A      192.168.230.134&#xa;@       IN  A      192.168.230.134&#xa;www     IN  CNAME  @&#xa;@       IN  MX 10  mail.test.i2c.com.&#xa;mail    IN  A      192.168.230.134&#xa;&#xa;&#xa;[root@testi2c ~]# vi /var/named/230.168.192.in-addr.arpa.zone&#xa;$TTL 86400&#xa;@   IN  SOA ns1.test.i2c.com. root.test.i2c.com. (&#xa;        2023122901  ; Serial&#xa;        3600        ; Refresh&#xa;        1800        ; Retry&#xa;        604800      ; Expire&#xa;        86400 )     ; Minimum TTL&#xa;;&#xa;&#xa;&#xa;&#xa;&#xa;        IN  NS  ns1.test.i2c.com.&#xa;134     IN  PTR ns1.test.i2c.com.&#xa;134     IN  PTR test.i2c.com.&#xa;134     IN  PTR mail.test.i2c.com.&#xa;===&#xa;&#xa;&#xa;### 1. Postfixのインストールと設定&#xa;&#xa;&#xa;#### インストール:&#xa;===&#xa;[root@localhost ~]# yum -y install postfix&#xa;読み込んだプラグイン:fastestmirror&#xa;Loading mirror speeds from cached hostfile&#xa; * base: ftp.tsukuba.wide.ad.jp&#xa; * extras: ftp.tsukuba.wide.ad.jp&#xa; * updates: ftp.tsukuba.wide.ad.jp&#xa;パッケージ 2:postfix-2.10.1-9.el7.x86_64 はインストール済みか最新バージョンです&#xa;何もしません&#xa;===&#xa;&#xa;&#xa;&#xa;&#xa;#### 設定:&#xa;&#xa;&#xa;1. **Postfixの設定ファイル** (`/etc/postfix/main.cf`) を編集します。&#xa;- ドメイン名、リレーホスト、許可するネットワークなどの基本設定を行います。&#xa;- 例えば、`myhostname = mail.氏名.i2c.jp` のように設定します。&#xa;提供されたDNS設定とPostfixの設定要件に基づいて、Postfixのインストールと設定の手順を作成します。この設定は、`mail.test.i2c.com` というドメイン名でメールサーバを運用することを想定しています。&#xa;&#xa;&#xa;### 1. Postfixの設定&#xa;&#xa;&#xa;#### ファイル編集: `/etc/postfix/main.cf`&#xa;&#xa;&#xa;1. **ホスト名の設定**:&#xa;- ホスト名を `mail.test.i2c.com` に設定します。&#xa;     ===&#xa;     myhostname = mail.test.i2c.com&#xa;     ===&#xa;&#xa;&#xa;2. **ドメイン名の設定**:&#xa;- ドメイン名を `test.i2c.com` に設定します。&#xa;     ===&#xa;     mydomain = test.i2c.com&#xa;     ===&#xa;&#xa;&#xa;3. **メールの原点設定**:&#xa;- メールの原点をドメイン名に設定します。&#xa;     ===&#xa;     myorigin = $mydomain&#xa;     ===&#xa;&#xa;&#xa;4. **インターフェイスの設定**:&#xa;- すべてのネットワークインターフェイスでリッスンするように設定します。&#xa;     ===&#xa;     inet_interfaces = all&#xa;     ===&#xa;&#xa;&#xa;5. **配信先の設定**:&#xa;- ローカル配信先を設定します。&#xa;     ===&#xa;     mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain&#xa;     ===&#xa;&#xa;&#xa;6. **ネットワークの設定**:&#xa;- ローカルネットワークの範囲を設定します。&#xa;     ===&#xa;     mynetworks = 127.0.0.0/8, 192.168.230.0/24&#xa;     ===&#xa;&#xa;&#xa;7. **Maildir形式への変更**:&#xa;- メールボックス形式をMaildirに設定します。&#xa;     ===&#xa;     home_mailbox = Maildir/&#xa;     ===&#xa;&#xa;&#xa;8. **SMTPバナーの設定**:&#xa;- SMTPバナーをカスタマイズします。&#xa;     ===&#xa;     smtpd_banner = $myhostname ESMTP&#xa;     ===&#xa;&#xa;&#xa;9. **メールサイズの制限**:&#xa;- メールの最大サイズを10MBに制限します。&#xa;     ===&#xa;     message_size_limit = 10485760&#xa;     ===&#xa;&#xa;&#xa;10. **# 以下SMTP-Auth用設定**:&#xa;     ===&#xa;     smtpd_sasl_type = dovecot&#xa;     smtpd_sasl_path = private/auth&#xa;     smtpd_sasl_auth_enable = yes&#xa;     smtpd_sasl_security_options = noanonymous&#xa;     smtpd_sasl_local_domain = $myhostname&#xa;     smtpd_recipient_restrictions = permit_mynetworks, permit_auth_destination, permit_sasl_authenticated, reject&#xa;     ===&#xa;&#xa;&#xa;### 2. Postfixサービスの管理&#xa;&#xa;&#xa;再起動、有効化、ステータス確認&#xa;===&#xa;[root@localhost ~]# systemctl restart postfix&#xa;[root@localhost ~]# systemctl enable postfix&#xa;[root@localhost ~]#&#xa;[root@localhost ~]# systemctl status postfix&#xa;● postfix.service - Postfix Mail Transport Agent&#xa;   Loaded: loaded (/usr/lib/systemd/system/postfix.service; enabled; vendor preset: disabled)&#xa;   Active: active (running) since 日 2023-12-31 23:48:08 JST; 14s ago&#xa; Main PID: 9291 (master)&#xa;   CGroup: /system.slice/postfix.service&#xa;           tq9291 /usr/libexec/postfix/master -w&#xa;           tq9292 pickup -l -t unix -u&#xa;           mq9293 qmgr -l -t unix -u&#xa;&#xa;&#xa;12月 31 23:48:08 ns1.test.i2c.com systemd[1]: Stopped Postfix Mail Transport Agent.&#xa;12月 31 23:48:08 ns1.test.i2c.com systemd[1]: Starting Postfix Mail Transport Agent...&#xa;12月 31 23:48:08 ns1.test.i2c.com postfix/master[9291]: daemon started -- version 2.10.1, configuration /etc/postfix&#xa;12月 31 23:48:08 ns1.test.i2c.com systemd[1]: Started Postfix Mail Transport Agent.&#xa;===&#xa;&#xa;&#xa;&#xa;&#xa;2. **firewalldで必要なポートを開ける**:&#xa;- SMTPプロトコル用のポート（25, 587）を開放します。&#xa;     ===&#xa;     [root@localhost ~]# firewall-cmd --add-service=smtp --permanent&#xa;     success&#xa;     [root@localhost ~]# firewall-cmd --reload&#xa;     success&#xa;     ===&#xa;&#xa;&#xa;3. **テスト**:&#xa;===&#xa;[root@localhost ~]# ss -tuln | grep &#39;:25&#39;&#xa;tcp    LISTEN     0      100       *:25                    *:*&#xa;tcp    LISTEN     0      100    [::]:25                 [::]:*&#xa;[root@localhost ~]#&#xa;[root@localhost ~]#&#xa;[root@localhost ~]# ss -tuln | grep &#39;:25&#39;&#xa;tcp    LISTEN     0      100       *:25                    *:*&#xa;tcp    LISTEN     0      100    [::]:25                 [::]:*&#xa;[root@localhost ~]#&#xa;[root@ns1 ~]# telnet mail.test.i2c.com 25&#xa;Trying 192.168.230.134...&#xa;Connected to mail.test.i2c.com.&#xa;Escape character is &#39;^]&#39;.&#xa;220 mail.test.i2c.com ESMT&#xa;EHLO mail.test.i2c.com&#xa;250-mail.test.i2c.com&#xa;250-PIPELINING&#xa;250-SIZE 10240000&#xa;250-VRFY&#xa;250-ETRN&#xa;250-ENHANCEDSTATUSCODES&#xa;250-8BITMIME&#xa;250 DSN&#xa;MAIL FROM: kaneko@test.i2c.com&#xa;250 2.1.0 Ok&#xa;RCPT TO:kaneko_yohei@i2c.jp&#xa;250 2.1.5 Ok&#xa;DATA&#xa;354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;&#xa;HeLLo! How are you ?.&#xa;.&#xa;250 2.0.0 Ok: queued as 1B9A080C6A8&#xa;QUIT&#xa;221 2.0.0 Bye&#xa;Connection closed by foreign host.&#xa;===&#xa;&#xa;&#xa;Windowsでipv4のみ使用しDNSサーバを指定します。&#xa;===&#xa;ウィンドウズボタン＋Rキーで&#xa;ファイル名を「ncpa.cpl」&#xa;「wifiの欄で」「プロパティ」⇒「インターネットプロトコル　バージョン４（tcp/ip）」&#xa;「プロパティ」⇒「次のDNSサーバーのアドレスを使う」にチェックを入れる&#xa;優先DNSサーバーに自分のテラタームに入っているIPアドレスを入れる。&#xa;===&#xa;&#xa;&#xa;「cmd」コマンドプロンプトで設定の確認します。&#xa;===&#xa;ipconfig /all&#xa;===&#xa;&#xa;&#xa;名前解決できているか確認します。&#xa;===&#xa;&gt;nslookup mail.test.i2c.com&#xa;サーバー:  mail.test.i2c.com&#xa;Address:  192.168.230.134&#xa;&#xa;&#xa;名前:    mail.test.i2c.com&#xa;Address:  192.168.230.134&#xa;&#xa;&#xa;&gt;nslookup 192.168.230.134&#xa;サーバー:  mail.test.i2c.com&#xa;Address:  192.168.230.134&#xa;&#xa;&#xa;名前:    mail.test.i2c.com&#xa;Address:  192.168.230.134&#xa;===&#xa;&#xa;&#xa;thunderbirdをインストール&#xa;thunderbird設定&#xa;&#xa;&#xa;名前：test_i2c&#xa;メール：est_i2c@test.i2c.com&#xa;パスワード：test_i2c&#xa;&#xa;&#xa;### 2. Dovecotのインストールと設定&#xa;&#xa;&#xa;#### インストール:&#xa;&#xa;&#xa;===&#xa;yum install dovecot&#xa;===&#xa;&#xa;&#xa;- これにより、Dovecot POP3/IMAPサーバがインストールされます。&#xa;&#xa;&#xa;#### 設定:&#xa;&#xa;&#xa;1. **Dovecotの設定ファイル** (`/etc/dovecot/dovecot.conf`) を編集します。&#xa;- メールボックスの位置、認証方法、使用するプロトコル（POP3、IMAP）などを設定します。&#xa;&#xa;&#xa;2. **firewalldで必要なポートを開ける**:&#xa;- POP3（110）、IMAP（143）、POP3S（995）、IMAPS（993）用のポートを開放します。&#xa;     ===&#xa;     firewall-cmd --add-service=pop3 --permanent&#xa;     firewall-cmd --add-service=imap --permanent&#xa;     firewall-cmd --reload&#xa;     ===&#xa;&#xa;&#xa;3. **Dovecotの起動と有効化**:&#xa;- Dovecotサービスを起動し、システム起動時に自動起動するように設定します。&#xa;     ===&#xa;     systemctl start dovecot&#xa;     systemctl enable dovecot&#xa;     ===&#xa;&#xa;&#xa;### 3. サービス・ポート・ログの確認&#xa;&#xa;&#xa;1. **サービスの状態確認**:&#xa;- PostfixとDovecotのサービスが正常に稼働していることを確認します。&#xa;     ===&#xa;     systemctl status postfix&#xa;     systemctl status dovecot&#xa;     ===&#xa;&#xa;&#xa;2. **メールログの確認**:&#xa;- メールログ（通常は `/var/log/maillog`）を確認して、エラーが出ていないか確認します。&#xa;&#xa;&#xa;提供されたDovecotの設定手順に基づいて、Dovecotの設定を行うプロセスを説明します。この設定では、IMAPとPOP3のプロトコルを有効にし、Postfixとの連携を設定しています。&#xa;&#xa;&#xa;### 1. Dovecotの主設定ファイルの編集 (`/etc/dovecot/dovecot.conf`)&#xa;&#xa;&#xa;1. **プロトコルの設定**:&#xa;   - IMAP、POP3、LMTPプロトコルを有効にします。&#xa;     ===&#xa;     protocols = imap pop3 lmtp&#xa;     ===&#xa;&#xa;&#xa;2. **リッスン設定**:&#xa;   - すべてのインターフェースでリッスンするように設定します（IPv6をリッスンしない場合）。&#xa;     ===&#xa;     listen = *&#xa;     ===&#xa;&#xa;&#xa;### 2. 認証の設定 (`/etc/dovecot/conf.d/10-auth.conf`)&#xa;&#xa;&#xa;1. **プレーンテキスト認証の設定**:&#xa;   - プレーンテキスト認証を許可します。&#xa;     ===&#xa;     disable_plaintext_auth = no&#xa;     ===&#xa;&#xa;&#xa;2. **認証メカニズムの設定**:&#xa;   - 使用する認証メカニズムを指定します。&#xa;     ===&#xa;     auth_mechanisms = plain login&#xa;     ===&#xa;&#xa;&#xa;### 3. メールの設定 (`/etc/dovecot/conf.d/10-mail.conf`)&#xa;&#xa;&#xa;1. **メールの保存場所**:&#xa;   - メールをMaildir形式でユーザのホームディレクトリ内に保存します。&#xa;     ===&#xa;     mail_location = maildir:~/Maildir&#xa;     ===&#xa;&#xa;&#xa;### 4. サービスの設定 (`/etc/dovecot/conf.d/10-master.conf`)&#xa;&#xa;&#xa;1. **Postfixとの連携設定**:&#xa;   - PostfixのSMTP認証用の設定を追加します。&#xa;     ===&#xa;     #Postfix smtp-auth&#xa;     unix_listener /var/spool/postfix/private/auth {&#xa;       mode = 0666&#xa;       user = postfix&#xa;      group = postfix&#xa;     }&#xa;     ===&#xa;&#xa;&#xa;### 5. SSLの設定 (`/etc/dovecot/conf.d/10-ssl.conf`)&#xa;&#xa;&#xa;1. **SSLの要求設定**:&#xa;   - SSLを要求しないように設定します（テスト環境などの場合）。&#xa;     ===&#xa;     ssl = no&#xa;     ===&#xa;&#xa;&#xa;### 6. Dovecotサービスの再起動&#xa;&#xa;&#xa;- 設定変更後、Dovecotを再起動して変更を適用します。&#xa;  ===&#xa;  systemctl restart dovecot&#xa;  ===&#xa;&#xa;&#xa;&#xa;&#xa;### 7. 確認&#xa;===&#xa;[root@testi2c ~]# su - sam&#xa;最終ログイン: 2024/01/02 (火) 18:37:42 JST日時 pts/0&#xa;[sam@testi2c ~]$&#xa;[sam@testi2c ~]$&#xa;[sam@testi2c ~]$ ls -l&#xa;合計 0&#xa;drwx------. 5 sam sam 39  1月  2 18:36 Maildir&#xa;[sam@testi2c ~]$ cd M&#xa;-bash: cd: M: そのようなファイルやディレクトリはありません&#xa;[sam@testi2c ~]$ cd Maildir/&#xa;[sam@testi2c Maildir]$&#xa;[sam@testi2c Maildir]$ ls -l&#xa;合計 0&#xa;drwx------. 2 sam sam  6  1月  2 18:36 cur&#xa;drwx------. 2 sam sam 98  1月  2 18:37 new&#xa;drwx------. 2 sam sam  6  1月  2 18:37 tmp&#xa;[sam@testi2c Maildir]$ cd new&#xa;[sam@testi2c new]$ pwd&#xa;/home/sam/Maildir/new&#xa;[sam@testi2c new]$ ls -l&#xa;合計 8&#xa;-rw-------. 1 sam sam 515  1月  2 18:36 1704188189.Vfd00I402315M620856.testi2c&#xa;-rw-------. 1 sam sam 522  1月  2 18:37 1704188224.Vfd00I505e20M720955.testi2c&#xa;[sam@testi2c new]$&#xa;[sam@testi2c new]$ cat 1704188189.Vfd00I402315M620856.testi2c&#xa;Return-Path: &lt;root@test.i2c.com&gt;&#xa;X-Original-To: sam@test.i2c.com&#xa;Delivered-To: sam@test.i2c.com&#xa;Received: by mail.test.i2c.com (Postfix, from userid 0)&#xa;        id 91A908097B3; Tue,  2 Jan 2024 18:36:29 +0900 (JST)&#xa;Date: Tue, 02 Jan 2024 18:36:29 +0900&#xa;To: sam@test.i2c.com&#xa;Subject: test mail&#xa;User-Agent: Heirloom mailx 12.5 7/5/10&#xa;MIME-Version: 1.0&#xa;Content-Type: text/plain; charset=us-ascii&#xa;Content-Transfer-Encoding: 7bit&#xa;Message-Id: &lt;20240102093629.91A908097B3@mail.test.i2c.com&gt;&#xa;From: root@test.i2c.com (root)&#xa;&#xa;&#xa;#&#xa;1&#xa;#1&#xa;===&#xa;&#xa;&#xa;なぜかthnderbirdを使用してログインはできませんでした&#xa;===&#xa;[root@testi2c ~]# telnet mail.test.i2c.com 143&#xa;Trying 192.168.230.134...&#xa;Connected to mail.test.i2c.com.&#xa;Escape character is &#39;^]&#39;.&#xa;* OK [CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE IDLE AUTH=PLAIN AUTH=LOGIN] Dovecot ready.&#xa;a logout&#xa;* BYE Logging out&#xa;a OK Logout completed.&#xa;Connection closed by foreign host.&#xa;[root@testi2c ~]#&#xa;[root@testi2c ~]# telnet mail.test.i2c.com 25&#xa;Trying 192.168.230.134...&#xa;Connected to mail.test.i2c.com.&#xa;Escape character is &#39;^]&#39;.&#xa;220 mail.test.i2c.com ESMT&#xa;QUIT&#xa;&#xa;&#xa;&#xa;&#xa;Connection closed by foreign host.&#xa;[root@testi2c ~]#&#xa;[root@testi2c ~]# systemctl status dovecot&#xa;● dovecot.service - Dovecot IMAP/POP3 email server&#xa;   Loaded: loaded (/usr/lib/systemd/system/dovecot.service; enabled; vendor preset: disabled)&#xa;   Active: active (running) since 火 2024-01-02 18:40:58 JST; 17min ago&#xa;     Docs: man:dovecot(1)&#xa;           http://wiki2.dovecot.org/&#xa;  Process: 3665 ExecStop=/usr/bin/doveadm stop (code=exited, status=0/SUCCESS)&#xa;  Process: 3677 ExecStart=/usr/sbin/dovecot (code=exited, status=0/SUCCESS)&#xa;  Process: 3675 ExecStartPre=/usr/sbin/portrelease dovecot (code=exited, status=0/SUCCESS)&#xa;  Process: 3669 ExecStartPre=/usr/libexec/dovecot/prestartscript (code=exited, status=0/SUCCESS)&#xa; Main PID: 3680 (dovecot)&#xa;   CGroup: /system.slice/dovecot.service&#xa;           tq3680 /usr/sbin/dovecot&#xa;           tq3681 dovecot/anvil&#xa;           tq3682 dovecot/log&#xa;           mq3684 dovecot/config&#xa;&#xa;&#xa; 1月 02 18:40:58 testi2c systemd[1]: Stopped Dovecot IMAP/POP3 email server.&#xa; 1月 02 18:40:58 testi2c systemd[1]: Starting Dovecot IMAP/POP3 email server...&#xa; 1月 02 18:40:58 testi2c systemd[1]: Can&#39;t open PID file /var/run/dovecot/master.pid (yet?) after start: No such file or directory&#xa; 1月 02 18:40:58 testi2c dovecot[3680]: master: Dovecot v2.2.36 (1f10bfa63) starting up for imap, pop3, lmtp (core dumps disabled)&#xa; 1月 02 18:40:58 testi2c systemd[1]: Started Dovecot IMAP/POP3 email server.&#xa; 1月 02 18:51:38 testi2c dovecot[3682]: imap-login: Aborted login (no auth attempts in 17 secs): user=&lt;&gt;, rip=192.168.230.134, lip=192.168.230.134, secured, sessio&#xa;[root@testi2c ~]#&#xa;[root@testi2c ~]#&#xa;[root@testi2c ~]#&#xa;[root@testi2c ~]# systemctl status postfix&#xa;● postfix.service - Postfix Mail Transport Agent&#xa;   Loaded: loaded (/usr/lib/systemd/system/postfix.service; enabled; vendor preset: disabled)&#xa;   Active: active (running) since 火 2024-01-02 16:58:40 JST; 2h 0min ago&#xa; Main PID: 1404 (master)&#xa;   CGroup: /system.slice/postfix.service&#xa;           tq1404 /usr/libexec/postfix/master -w&#xa;           tq1411 qmgr -l -t unix -u&#xa;           mq3402 pickup -l -t unix -u&#xa;&#xa;&#xa; 1月 02 18:36:29 testi2c postfix/qmgr[1411]: 91A908097B3: from=&lt;root@test.i2c.com&gt;, size=434, nrcpt=1 (queue active)&#xa; 1月 02 18:36:29 testi2c postfix/local[3390]: 91A908097B3: to=&lt;sam@test.i2c.com&gt;, relay=local, delay=0.04, delays=0.03/0.01/0/0, dsn=2.0.0, status=sent (delivered&#xa; 1月 02 18:36:29 testi2c postfix/qmgr[1411]: 91A908097B3: removed&#xa; 1月 02 18:37:04 testi2c postfix/pickup[3402]: AECAC8097B3: uid=0 from=&lt;root&gt;&#xa; 1月 02 18:37:04 testi2c postfix/cleanup[3388]: AECAC8097B3: message-id=&lt;20240102093704.AECAC8097B3@mail.test.i2c.com&gt;&#xa; 1月 02 18:37:04 testi2c postfix/qmgr[1411]: AECAC8097B3: from=&lt;root@test.i2c.com&gt;, size=439, nrcpt=1 (queue active)&#xa; 1月 02 18:37:04 testi2c postfix/local[3390]: AECAC8097B3: to=&lt;sam@test.i2c.com&gt;, relay=local, delay=0.02, delays=0.02/0/0/0, dsn=2.0.0, status=sent (delivered to&#xa; 1月 02 18:37:04 testi2c postfix/qmgr[1411]: AECAC8097B3: removed&#xa; 1月 02 18:51:47 testi2c postfix/smtpd[4220]: connect from mail.test.i2c.com[192.168.230.134]&#xa; 1月 02 18:57:14 testi2c postfix/smtpd[4220]: disconnect from mail.test.i2c.com[192.168.230.134]&#xa;===" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="41" y="174" width="1052.66" height="8039" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="kr1eoK4w5IK-uH7wVtcb" name="Squid">
    <mxGraphModel dx="1647" dy="839" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="cxlVknKWUIK52B6KlhbZ-1" value="### 1. Squidサーバーの設定&#xa;&#xa;&#xa;まず、Squidサーバーを設定して、適切に機能するようにします。&#xa;&#xa;&#xa;1. **Squidのインストール**:&#xa;   - LinuxサーバーでSquidをインストールします。&#xa;     ===&#xa;     yum install squid&#xa;     ===&#xa;&#xa;&#xa;2. **Squidの設定ファイルの編集** (`/etc/squid/squid.conf`):&#xa;   - 必要に応じて設定を編集します。特に、ローカルネットワークからのアクセスを許可し、外部へのアクセスを制限する設定を行います。&#xa;&#xa;&#xa;提供された情報に基づいて、Squidプロキシサーバーの設定とサービスの起動、自動起動の設定方法を説明します。&#xa;&#xa;&#xa;### Squidプロキシサーバーの設定&#xa;&#xa;&#xa;1. **Squid設定ファイルの編集**:&#xa;   - Squidのメイン設定ファイル `squid.conf` を編集します。&#xa;     ===&#xa;     sudo vi /etc/squid/squid.conf&#xa;     # ACLを追加&#xa;     acl lan src 192.168.0.0/16&#xa;&#xa;&#xa;     # ローカルネットワークからのHTTPアクセスを許可&#xa;     http_access allow lan&#xa;&#xa;&#xa;     # Refererヘッダーの削除&#xa;     # これにより、クライアントが訪れた前のウェブページのアドレスが外部に露出しないようにします。&#xa;     request_header_access Referer deny all&#xa;&#xa;&#xa;     # X-Forwarded-Forヘッダーの削除&#xa;     # これにより、クライアントの実際のIPアドレス情報が外部に露出しないようにします。&#xa;     request_header_access X-Forwarded-For deny all&#xa;&#xa;&#xa;     # Viaヘッダーの削除&#xa;     # これにより、リクエストがプロキシサーバーを経由していることが外部に露出しないようにします。&#xa;     request_header_access Via deny all&#xa;&#xa;&#xa;     # Cache-Controlヘッダーの削除&#xa;     # これにより、クライアントのキャッシュコントロールの設定が外部に露出しないようにします。&#xa;     request_header_access Cache-Control deny all&#xa;&#xa;&#xa;     #クライアントのIPアドレスが外部に露出しないようにするために、`forwarded_for` オプションを無効化します。&#xa;     forwarded_for off&#xa;     ===&#xa;&#xa;&#xa;### Squidサービスの起動と自動起動の設定&#xa;&#xa;&#xa;1. **Squidサービスの起動と有効化**:&#xa;   - Squidサービスを起動し、システム起動時に自動的に起動するように設定します。&#xa;     ===&#xa;     systemctl start squid&#xa;     systemctl enable squid&#xa;     ===&#xa;&#xa;&#xa;4. **Firewalldでのポート開放**:&#xa;   - Squidが使用するポート（デフォルトは3128）を開放します。&#xa;     ===&#xa;     firewall-cmd --permanent --add-port=3128/tcp&#xa;     firewall-cmd --add-service=squid --permanent&#xa;     firewall-cmd --reload&#xa;     ===&#xa;&#xa;&#xa;### プロキシクライアント設定&#xa;&#xa;&#xa;1. **環境変数の設定**:&#xa;   - `/etc/profile` を編集する前に、プロキシサーバーのURLを指定するための変数 `MY_PROXY_URL` を設定します。&#xa;     ===&#xa;     sudo vi /etc/profile&#xa;     ===&#xa;&#xa;&#xa;2. **プロキシURLの設定**:&#xa;   - ファイルの適切な場所（通常はファイルの最後）に以下の行を追加します：&#xa;     ===&#xa;     MY_PROXY_URL=&quot;http://192.168.230.134:3128/&quot;&#xa;     export MY_PROXY_URL&#xa;     ===&#xa;&#xa;&#xa;3. **プロキシ変数の設定**:&#xa;   - 同じファイルに、以下のプロキシ変数を追加します：&#xa;     ===&#xa;     HTTP_PROXY=$MY_PROXY_URL&#xa;     HTTPS_PROXY=$MY_PROXY_URL&#xa;     FTP_PROXY=$MY_PROXY_URL&#xa;     http_proxy=$MY_PROXY_URL&#xa;     https_proxy=$MY_PROXY_URL&#xa;     ftp_proxy=$MY_PROXY_URL &#xa;&#xa;&#xa;     export HTTP_PROXY HTTPS_PROXY FTP_PROXY http_proxy https_proxy ftp_proxy &#xa;     ===&#xa;&#xa;&#xa;4. **変更の適用**:&#xa;   - 新しいプロファイル設定を適用するためにシステムを再起動するか、新しいターミナルセッションを開始します。&#xa;     ===&#xa;     source /etc/profile&#xa;     ===&#xa;&#xa;&#xa;### 2. WindowsでのIEプロキシ設定&#xa;&#xa;&#xa;### Google Chromeでのプロキシ設定手順&#xa;&#xa;&#xa;1. **Google Chromeを開く**:&#xa;   - Google Chromeブラウザを開きます。&#xa;&#xa;&#xa;2. **設定にアクセス**:&#xa;   - 右上の「︙」（縦の3点）アイコンをクリックし、「設定」を選択します。&#xa;&#xa;&#xa;3. **詳細設定を開く**:&#xa;   - 「設定」ページで下までスクロールします。&#xa;&#xa;&#xa;4. **システムの設定を開く**:&#xa;   - 「システム」セクションを見つけ、「プロキシ設定を開く」をクリックします。これによりWindowsのインターネットオプションが開きます。&#xa;&#xa;&#xa;5. **LANの設定**:&#xa;   - 「セットアップ」をクリックします。&#xa;      IPアドレス（192.168.230.134）とポート番号（3128）を入力し、保存します。&#xa;&#xa;&#xa;### 3. Squidサービスの確認&#xa;&#xa;&#xa;Squidサービスが正常に稼働していることを確認します。&#xa;&#xa;&#xa;1. **Squidサービスの状態確認**:&#xa;   - Squidサービスが正常に稼働しているか確認します。&#xa;     ===&#xa;     [root@testi2c ~]# systemctl status squid&#xa;     ● squid.service - Squid caching proxy&#xa;        Loaded: loaded (/usr/lib/systemd/system/squid.service; enabled; vendor preset: disabled)&#xa;        Active: active (running) since 水 2024-01-03 00:22:09 JST; 2min 48s ago&#xa;      Main PID: 21432 (squid)&#xa;        CGroup: /system.slice/squid.service&#xa;                tq21432 /usr/sbin/squid -f /etc/squid/squid.conf&#xa;                tq21435 (squid-1) -f /etc/squid/squid.conf&#xa;                mq21436 (logfile-daemon) /var/log/squid/access.log&#xa;&#xa;&#xa;      1月 03 00:22:08 testi2c systemd[1]: Starting Squid caching proxy...&#xa;      1月 03 00:22:09 testi2c systemd[1]: Started Squid caching proxy.&#xa;      1月 03 00:22:09 testi2c squid[21432]: Squid Parent: will start 1 kids&#xa;      1月 03 00:22:09 testi2c squid[21432]: Squid Parent: (squid-1) process 21435 started&#xa;     [root@testi2c ~]# tail -f /var/log/squid/access.log | curl -v -k &quot;https://www.yahoo.co.jp&quot;&#xa;     * About to connect() to proxy 192.168.200.134 port 3128 (#0)&#xa;     *   Trying 192.168.200.134...&#xa;     * 接続を拒否されました&#xa;     * Failed connect to 192.168.200.134:3128; 接続を拒否されました&#xa;     * Closing connection 0&#xa;     curl: (7) Failed connect to 192.168.200.134:3128; 接続を拒否されました&#xa;     [root@testi2c ~]# ss -tuln | grep &#39;:3128&#39;&#xa;     tcp    LISTEN     0      128    [::]:3128               [::]:*&#xa;     ===&#xa;    &#xa;    IPv6でListen状態のままでした&#xa;    ===&#xa;    [root@testi2c ~]# ss -tuln | grep &#39;:3128&#39;&#xa;    tcp    LISTEN     0      128    [::]:3128               [::]:*&#xa;    ===&#xa;    &#xa;    http_port 0.0.0.0:3128に修正してみます&#xa;    ===&#xa;    http_port 0.0.0.0:3128&#xa;    ===&#xa;    &#xa;    原因がわかりました誤ったサーバを指定していたためでした&#xa;    本来のサーバのIPアドレスは192.168.230.134のところ、192.168.200.134と勘違いしていたため、うまく動作できなかったみたいです。&#xa;    下記のように92.168.230.134で動作確認したところ、うまく動作すること確認できました&#xa;    ===&#xa;    [root@testi2c ~]# curl -v -k -x http://192.168.230.134:3128 &quot;https://www.yahoo.co.jp&quot;&#xa;    * About to connect() to proxy 192.168.230.134 port 3128 (#0)&#xa;    *   Trying 192.168.230.134...&#xa;    * Connected to 192.168.230.134 (192.168.230.134) port 3128 (#0)&#xa;    * Establish HTTP proxy tunnel to www.yahoo.co.jp:443&#xa;    &gt; CONNECT www.yahoo.co.jp:443 HTTP/1.1&#xa;    &gt; Host: www.yahoo.co.jp:443&#xa;    &gt; User-Agent: curl/7.29.0&#xa;    &gt; Proxy-Connection: Keep-Alive&#xa;    &gt;&#xa;    &lt; HTTP/1.1 200 Connection established&#xa;    &lt;&#xa;    * Proxy replied OK to CONNECT request&#xa;    * Initializing NSS with certpath: sql:/etc/pki/nssdb&#xa;    * skipping SSL peer certificate verification&#xa;    * SSL connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&#xa;    * Server certificate:&#xa;    *       subject: CN=edge01.yahoo.co.jp,O=LY Corporation,L=Chiyoda-ku,ST=Tokyo,C=JP&#xa;    *       start date: 11月 30 13:16:07 2023 GMT&#xa;    *       expire date: 12月 29 14:59:00 2024 GMT&#xa;    *       common name: edge01.yahoo.co.jp&#xa;    *       issuer: CN=Cybertrust Japan SureServer CA G4,O=&quot;Cybertrust Japan Co., Ltd.&quot;,C=JP&#xa;    &gt; GET / HTTP/1.1&#xa;    &gt; User-Agent: curl/7.29.0&#xa;    &gt; Host: www.yahoo.co.jp&#xa;    &gt; Accept: */*&#xa;    &gt;&#xa;    &lt; HTTP/1.1 200 OK&#xa;    &lt;・・・中略・・・&gt;&#xa;    * Connection #0 to host 192.168.230.134 left intact&#xa;    ===&#xa;    &#xa;&#xa;&#xa;&#xa;&#xa;2. **プロキシログの確認**:&#xa;   - Squidのログファイル（通常は `/var/log/squid/access.log`）を確認して、プロキシ経由でのリクエストが記録されているか確認します。&#xa;&#xa;&#xa;   ===&#xa;   [root@testi2c ~]# cat /var/log/squid/access.log | tail&#xa;   1704213951.028   6539 192.168.230.134 TCP_TUNNEL/200 40697 CONNECT www.yahoo.co.jp:443 - HIER_DIRECT/182.22.28.252 -&#xa;   ===" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="5" y="12" width="913" height="3489" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
