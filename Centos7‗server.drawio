<mxfile host="app.diagrams.net" modified="2023-12-30T14:32:47.832Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" etag="aAGsKle0qoUJwAQhQnsw" version="22.1.16" type="github" pages="3">
  <diagram id="Cw5CgzrS2XZY5D7zUyKp" name="OSインストール">
    <mxGraphModel dx="1647" dy="839" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="szrl0G2C0kDdJWEc9u8A-1" value="### 1. NICに固定IPを設定&#xa;1. **ネットワーク設定ファイルの編集**:&#xa;   - nmtui&#xa;   - IPADDR、NETMASK、GATEWAY、DNS1（必要に応じて）を適切な値に設定&#xa;&#xa;&#xa;2. **ネットワークサービスの再起動**:&#xa;   - `sudo systemctl restart network`&#xa;&#xa;&#xa;### 2. インターネット接続の確認&#xa;- **pingコマンドで外部接続を確認**:&#xa;[admin@localhost ~]$ ping www.i2c.jp&#xa;PING www.i2c.jp (163.44.185.163) 56(84) bytes of data.&#xa;64 bytes from 163-44-185-163.virt.lolipop.jp (163.44.185.163): icmp_seq=1 ttl=128 time=21.3 ms&#xa;64 bytes from 163-44-185-163.virt.lolipop.jp (163.44.185.163): icmp_seq=2 ttl=128 time=21.3 ms&#xa;64 bytes from 163-44-185-163.virt.lolipop.jp (163.44.185.163): icmp_seq=3 ttl=128 time=26.5 ms&#xa;  &#xa;&#xa;&#xa;### 3. SELinuxの無効化&#xa;1. **現在のSELinuxの状態確認**:&#xa;   - `getenforce`&#xa;   - &quot;Enforcing&quot; と表示されている場合は、SELinuxが有効です。&#xa;2. **SELinuxを無効にする**:&#xa;   - `sudo setenforce 0`&#xa;   - 恒久的に無効にするには、`/etc/selinux/config` ファイルを編集し、`SELINUX=disabled` に設定します。&#xa;&#xa;&#xa;### 4. OSアップデート&#xa;- **パッケージの更新**:&#xa;  - `sudo yum update`&#xa;  - これにより、CentOSとすべてのインストールされたパッケージが最新の状態に更新されます。&#xa;&#xa;&#xa;### 5. open-vm-toolsのインストール&#xa;- VMware環境でCentOSを実行している場合にのみ適用します。&#xa;- **open-vm-toolsのインストール**:&#xa;  - `sudo yum install open-vm-tools`&#xa;  - VMware上でのCentOSのパフォーマンスと管理を改善します。&#xa;  &#xa;[admin@localhost ~]$ rpm -q open-vm-tools&#xa;open-vm-tools-11.0.5-3.el7_9.7.x86_64" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="67" y="47" width="667" height="641" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram name="SSH" id="EZcLK18hInASVvrHGoVY">
    <mxGraphModel dx="1647" dy="839" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="BWevsbJ870ceWmd9wQKM-1" value="### 8. TeraTermからSSH接続確認&#xa;1. **Windows端末からTeraTermを起動**:&#xa;   - TeraTermをインストールしていない場合は、インストールが必要です。&#xa;2. **SSH接続設定**:&#xa;   - TeraTermの「新しい接続」で、CentOSサーバのIPアドレスまたはホスト名を入力します。&#xa;   - ポート番号をデフォルトの22から変更した場合は、変更したポート番号（例: 10022）を入力します。&#xa;3. **接続テスト**:&#xa;   - 「OK」をクリックして接続を試みます。成功すれば、ログインプロンプトが表示されます。&#xa;&#xa;&#xa;### 9. SSHセキュリティ設定&#xa;1. **SSHポートの変更**:&#xa;   - `sudo vi /etc/ssh/sshd_config` でSSH設定ファイルを開きます。&#xa;   - `Port 22` を `Port 10022`（または他のポート）に変更します。&#xa;   ===&#xa;   # If you want to change the port on a SELinux system, you have to tell&#xa;   # SELinux about this change.&#xa;   # semanage port -a -t ssh_port_t -p tcp #PORTNUMBER&#xa;   #&#xa;   Port 22&#xa;   Port 10022&#xa;   #AddressFamily any&#xa;   #ListenAddress 0.0.0.0&#xa;   #ListenAddress ::&#xa;   ===&#xa;2. **rootユーザの直接ログイン禁止**:&#xa;   - 同じファイルで `PermitRootLogin yes` を `PermitRootLogin no` に変更します。&#xa;3. **公開鍵認証の設定**:&#xa;   - teratermの鍵生成より、鍵を生成します。&#xa;   - 公開鍵をサーバの `vi ~/.ssh/authorized_keys` にコピーします。&#xa;4. **FirewalldでSSHポートを開放**:&#xa;   - `sudo firewall-cmd --permanent --add-port=10022/tcp` を実行します。&#xa;   - `sudo firewall-cmd --reload` で設定を適用します。&#xa;5. **SSHサービスの再起動**:&#xa;   - `sudo systemctl restart sshd`&#xa;&#xa;&#xa;### 10. サービス・ポート・ログ確認&#xa;1. **SSHサービスの状態確認**:&#xa;   - `systemctl status sshd` でSSHサービスの状態を確認します。&#xa;   ===&#xa;   [root@localhost ~]# systemctl status sshd&#xa;   ● sshd.service - OpenSSH server daemon&#xa;      Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)&#xa;      Active: active (running) since 金 2023-12-29 15:37:12 JST; 16s ago&#xa;   ===&#xa;2. **SSHポートの確認**:&#xa;   - `ss -tuln | grep 10022` でSSHポートがリスニングしているか確認します。&#xa;   ===&#xa;   [root@localhost ~]# ss -tuln | grep 10022&#xa;   tcp    LISTEN     0      128       *:10022                 *:*&#xa;   tcp    LISTEN     0      128    [::]:10022              [::]:*&#xa;   ===&#xa;   tcp LISTEN 0 128 *:10022 *:*: これはIPv4アドレスでSSHサーバがポート10022でリスニングしていることを示しています。&#xa;   tcp LISTEN 0 128 [::]:10022 [::]:*: これはIPv6アドレスでSSHサーバがポート10022でリスニングしていることを示しています。&#xa;&#xa;&#xa;3. **SSHアクセスログの確認**:&#xa;   - `sudo journalctl -u sshd` を実行してSSHのアクセスログを確認します。&#xa;   ===&#xa;   [root@localhost ~]# journalctl -u sshd&#xa;   -- Logs begin at 木 2023-12-28 14:40:23 JST, end at 金 2023-12-29 15:37:12 JST. --&#xa;   12月 29 13:51:01 localhost.localdomain systemd[1]: Starting OpenSSH server daemon...&#xa;   12月 29 13:51:02 localhost.localdomain sshd[1125]: Server listening on 0.0.0.0 port 22.&#xa;   12月 29 13:51:02 localhost.localdomain sshd[1125]: Server listening on :: port 22.&#xa;   12月 29 13:51:02 localhost.localdomain systemd[1]: Started OpenSSH server daemon.&#xa;   12月 29 13:52:03 localhost.localdomain sshd[1650]: Accepted password for admin from 192.168.230.1 port 60614 ssh2&#xa;   12月 29 15:37:12 localhost.localdomain systemd[1]: Stopping OpenSSH server daemon...&#xa;   12月 29 15:37:12 localhost.localdomain systemd[1]: Stopped OpenSSH server daemon.&#xa;   12月 29 15:37:12 localhost.localdomain systemd[1]: Starting OpenSSH server daemon...&#xa;   12月 29 15:37:12 localhost.localdomain sshd[2422]: Server listening on 0.0.0.0 port 10022.&#xa;   12月 29 15:37:12 localhost.localdomain sshd[2422]: Server listening on :: port 10022.&#xa;   12月 29 15:37:12 localhost.localdomain sshd[2422]: Server listening on 0.0.0.0 port 22.&#xa;   12月 29 15:37:12 localhost.localdomain sshd[2422]: Server listening on :: port 22.&#xa;   12月 29 15:37:12 localhost.localdomain systemd[1]: Started OpenSSH server daemon.&#xa;   ===" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="11" y="196.79" width="780" height="1173" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="cSdYDNsyQWn_zRzjIRta" name="DNS">
    <mxGraphModel dx="1647" dy="839" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="7tC5FyxkFxibnzimmtPk-1" value="### 1. BINDとbind-chrootのインストール&#xa;    ===&#xa;    [root@localhost ~]# yum install bind bind-chroot&#xa;    読み込んだプラグイン:fastestmirror&#xa;    Determining fastest mirrors&#xa;     * base: ftp.tsukuba.wide.ad.jp&#xa;     * extras: ftp.tsukuba.wide.ad.jp&#xa;     * updates: ftp.tsukuba.wide.ad.jp&#xa;    総ダウンロード容量: 7.0 M&#xa;    インストール容量: 18 M&#xa;    Is this ok [y/d/N]: y&#xa;&#xa;&#xa;    ===&#xa;&#xa;&#xa;### 2. named.confファイルの編集&#xa;- `named.conf` にゾーン設定を追加します&#xa;    ### 1. `named.conf` ファイルの編集&#xa;    `named.conf` はBINDの主要な設定ファイルで、通常 `/etc/named.conf` に位置しています。&#xa;    このファイルを編集する前に、変更前の状態をバックアップしておくことをお勧めする。&#xa;    ===&#xa;    [root@localhost ~]# cp /etc/named.conf /etc/named.conf.backup&#xa;    ===&#xa;&#xa;&#xa;    次に、テキストエディタ（例えば `vi`）を使用して `named.conf` を編集します。&#xa;    ===&#xa;    [root@localhost ~]# vi /etc/named.conf&#xa;    &lt;&lt;&lt;中略&gt;&gt;&gt;&#xa;    options {&#xa;        listen-on port 53 { any; };&#xa;        listen-on-v6 port 53 { any; };&#xa;        directory       &quot;/var/named&quot;;&#xa;        dump-file       &quot;/var/named/data/cache_dump.db&quot;;&#xa;        statistics-file &quot;/var/named/data/named_stats.txt&quot;;&#xa;        memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;&#xa;        recursing-file  &quot;/var/named/data/named.recursing&quot;;&#xa;        secroots-file   &quot;/var/named/data/named.secroots&quot;;&#xa;        allow-query     { any;};&#xa;    ===&#xa;&#xa;&#xa;    ### 2. ゾーン設定の追加&#xa;    `named.conf` の適切なセクションにゾーン設定を追加します。&#xa;    例として、`example.com` ドメインのゾーン設定は以下のようになります。&#xa;    ===&#xa;    zone &quot;example.com&quot; IN {&#xa;        type master;&#xa;        file &quot;example.com.zone&quot;;&#xa;        allow-query { localnets; };&#xa;    };&#xa;    ===&#xa;    - `type master;`: このゾーンがマスター（原本）であることを指定します。&#xa;    - `file &quot;example.com.zone&quot;;`: このゾーンのデータが保存されているファイル名を指定します。&#xa;    - `allow-query { localnets; };`: ローカルネットワークからの問い合わせのみを許可します。&#xa;&#xa;&#xa;    ### 4. 設定の検証とサービスの再起動&#xa;    設定を変更した後は、必ず設定ファイルの構文を検証してください。&#xa;    エラーがなければ、BINDサービスを再起動して変更を適用します。&#xa;    ===&#xa;    [root@localhost ~]# named-checkconf&#xa;    [root@localhost ~]#systemctl restart named&#xa;    ======&#xa;&#xa;&#xa;### 3. 正引きゾーンファイルの作成&#xa;- `/var/named/` にゾーンファイルを作成します。&#xa;- Aレコード、CNAMEレコード、MXレコード、NSレコードを登録します。&#xa;&#xa;&#xa;正引きゾーンファイルを作成するには、`/var/named/` ディレクトリにゾーンファイル（この例では `example.com.zone`）を作成し、&#xa;その中にDNSレコード（Aレコード、CNAMEレコード、MXレコード、NSレコード）を定義します。&#xa;以下は `example.com` ドメインのための基本的なゾーンファイルの例です。&#xa;### ゾーンファイル `example.com.zone` の作成&#xa;    1. **ゾーンファイルの作成**:&#xa;       ===&#xa;       sudo vi /var/named/example.com.zone&#xa;       ===&#xa;&#xa;&#xa;    2. **ゾーンファイルの内容**:&#xa;       ===&#xa;       $TTL 86400&#xa;       @   IN  SOA ns1.example.com. root.example.com. (&#xa;               2023122901  ; Serial&#xa;               3600        ; Refresh&#xa;               1800        ; Retry&#xa;               604800      ; Expire&#xa;               86400       ; Minimum TTL&#xa;       )&#xa;               IN  NS     ns1.example.com.&#xa;       ns1     IN  A      192.168.2.1&#xa;       @       IN  A      192.168.2.100&#xa;       www     IN  CNAME  @&#xa;       @       IN  MX 10  mail.example.com.&#xa;       mail    IN  A      192.168.2.101&#xa;       ===&#xa;       $TTL 86400&#xa;         デフォルトの「Time To Live」で、DNSレコードがキャッシュされる時間を秒単位で指定します。ここでは86400秒、つまり24時間です。&#xa;       &#xa;       SOAレコード&#xa;         ゾーンの「Start of Authority」レコードで、ゾーンの基本情報を定義します。&#xa;         ns1.example.com. はプライマリネームサーバで、root.example.com. はゾーンの管理者のEメールアドレスです（Eメールの「@」はDNSで「.`」と表記されます）。&#xa;         シリアル番号、リフレッシュ、リトライ、エクスパイア、最小TTLの値が設定されています。&#xa;       &#xa;       NSレコード&#xa;         IN NS ns1.example.com. は、このゾーンのネームサーバを指定します。&#xa;      &#xa;       Aレコード&#xa;         ネームサーバ ns1 に対するIPv4アドレスが 192.168.2.1 として指定されています。&#xa;         ゾーンのルート（@、つまり example.com.）に対するIPv4アドレスが 192.168.2.100 として指定されています。&#xa;       &#xa;       CNAMEレコード&#xa;         www は example.com. （@で表される）のエイリアス（CNAME）として指定されています。&#xa;       &#xa;       MXレコード&#xa;         MX レコードは、メールサーバを mail.example.com. に設定しています。プライオリティは10です。&#xa;       &#xa;       追加のAレコード&#xa;         メールサーバ mail に対するIPv4アドレスが 192.168.2.101 として指定されています。&#xa;&#xa;&#xa;    3. **ゾーンファイルの構文チェック**:&#xa;       - ゾーンファイルを保存した後、以下のコマンドで構文をチェックします。&#xa;         ===&#xa;         [root@localhost ~]# named-checkzone example.com /var/named/example.com.zone&#xa;         zone example.com/IN: loaded serial 2023122901&#xa;         OK&#xa;         ===&#xa;&#xa;&#xa;    4. **BINDサービスの再起動**:&#xa;       - 設定を反映させるためにBINDサービスを再起動します。&#xa;         ===&#xa;         sudo systemctl restart named&#xa;         ===&#xa;&#xa;&#xa;### 4. 逆引きゾーンファイルの作成&#xa;- `/var/named/` に逆引きゾーンファイルを作成します。&#xa;- PTRレコードを登録します。&#xa;逆引きゾーンファイルを作成する際、PTR（ポインタ）レコードを使用してIPアドレスを対応するホスト名にマッピングします。&#xa;逆引きゾーンは、特定のIPアドレス範囲の逆引きDNSルックアップ用に設計されます。以下に一般的な手順と例を示します。&#xa;&#xa;&#xa;    ### 逆引きゾーンファイルの作成手順&#xa;    1. **逆引きゾーンファイルの作成**:&#xa;       - `/var/named/` ディレクトリ内に逆引きゾーンファイルを作成します。ファイル名は通常、対象のIPアドレス範囲に基づいて命名されます。&#xa;         例えば、`192.168.2.0/24` ネットワーク用の逆引きゾーンファイル名は `2.168.192.in-addr.arpa.zone` となることが多い。&#xa;         ===&#xa;         zone &quot;2.168.192.in-addr.arpa&quot; IN {&#xa;                 type master;&#xa;                 file &quot;2.168.192.in-addr.arpa.zone&quot;;&#xa;                 allow-update { none; };&#xa;         };&#xa;         [root@localhost ~]# vi /etc/named.conf&#xa;         [root@localhost ~]# named-checkconf&#xa;         ===&#xa;&#xa;&#xa;    2. **逆引きゾーンファイルの内容**:&#xa;       - ゾーンファイルの基本的な構造は正引きゾーンファイルに似ていますが、PTRレコードを使用します。&#xa;       - 以下に、`192.168.2.0/24` ネットワーク用の逆引きゾーンファイルの例を示します。&#xa;&#xa;&#xa;         ===&#xa;         [root@localhost ~]# vi /var/named/2.168.192.in-addr.arpa.zone&#xa;         $TTL 86400&#xa;         @   IN  SOA ns1.example.com. root.example.com. (&#xa;                 2023122901  ; Serial&#xa;                 3600        ; Refresh&#xa;                 1800        ; Retry&#xa;                 604800      ; Expire&#xa;                 86400 )     ; Minimum TTL&#xa;         ;&#xa;&#xa;&#xa;                 IN  NS  ns1.example.com.&#xa;         1       IN  PTR ns1.example.com.&#xa;         100     IN  PTR example.com.&#xa;         101     IN  PTR mail.example.com.&#xa;         ===&#xa;       - ここで、`1`、`100`、`101` はIPアドレスの最後のオクテットを指し、それぞれ `192.168.2.1`、`192.168.2.100`、`192.168.2.101` の逆引きエントリです。&#xa;&#xa;&#xa;    3. **構文チェック**:&#xa;       - `named-checkzone` コマンドを使用して逆引きゾーンファイルの構文をチェックします。&#xa;         ===&#xa;         named-checkzone 2.168.192.in-addr.arpa /var/named/2.168.192.in-addr.arpa.zone&#xa;         ===&#xa;&#xa;&#xa;    4. **サービスの再起動**:&#xa;       - 設定を適用するためにBINDサービスを再起動します。&#xa;         ===&#xa;         systemctl restart named&#xa;         ===&#xa;&#xa;&#xa;### 5. BINDサービスの開始と自動起動の設定&#xa;===&#xa;systemctl start named&#xa;systemctl enable named&#xa;===&#xa;&#xa;&#xa;### 6. FirewalldでDNSポートを開放&#xa;===&#xa;firewall-cmd --permanent --add-service=dns&#xa;firewall-cmd --reload&#xa;===&#xa;&#xa;&#xa;### 7. BINDサービスの状態確認&#xa;===&#xa;[root@localhost ~]# systemctl status named&#xa;● named.service - Berkeley Internet Name Domain (DNS)&#xa;   Loaded: loaded (/usr/lib/systemd/system/named.service; enabled; vendor preset: disabled)&#xa;   Active: active (running) since 土 2023-12-30 07:28:02 JST; 13min ago&#xa;  Process: 19102 ExecStop=/bin/sh -c /usr/sbin/rndc stop &gt; /dev/null 2&gt;&amp;1 || /bin/kill -TERM $MAINPID (code=exited, status=0/SUCCESS)&#xa;  Process: 19114 ExecStart=/usr/sbin/named -u named -c ${NAMEDCONF} $OPTIONS (code=exited, status=0/SUCCESS)&#xa;  Process: 19112 ExecStartPre=/bin/bash -c if [ ! &quot;$DISABLE_ZONE_CHECKING&quot; == &quot;yes&quot; ]; then /usr/sbin/named-checkconf -z &quot;$NAMEDCONF&quot;; else echo &quot;Checking of zone files is disabled&quot;; fi (code=exited, status=0/SUCCESS)&#xa; Main PID: 19116 (named)&#xa;   CGroup: /system.slice/named.service&#xa;           mq19116 /usr/sbin/named -u named -c /etc/named.conf&#xa;&#xa;&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: RRSIG validity period has not begun resolving &#39;com/DS/IN&#39;: 170.247.170.2#53&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: validating com/DS: verify failed due to bad signature (keyid=46780): RRSIG validity period has not begun&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: validating com/DS: no valid signature found&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: RRSIG validity period has not begun resolving &#39;com/DS/IN&#39;: 192.58.128.30#53&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: validating com/DS: verify failed due to bad signature (keyid=46780): RRSIG validity period has not begun&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: validating com/DS: no valid signature found&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: RRSIG validity period has not begun resolving &#39;com/DS/IN&#39;: 199.7.83.42#53&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: no valid DS resolving &#39;www.google.com/A/IN&#39;: 216.239.38.10#53&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: validating www.google.com/A: bad cache hit (com/DS)&#xa;12月 30 07:28:16 localhost.localdomain named[19116]: broken trust chain resolving &#39;www.google.com/A/IN&#39;: 216.239.36.10#53&#xa;===&#xa;&#xa;&#xa;### 8. BINDのポート確認&#xa;===&#xa;[root@localhost ~]# ss -tuln | grep 53&#xa;udp    UNCONN     0      0      192.168.230.130:53                    *:*&#xa;udp    UNCONN     0      0      127.0.0.1:53                    *:*&#xa;udp    UNCONN     0      0      [::]:53                 [::]:*&#xa;tcp    LISTEN     0      10     192.168.230.130:53                    *:*&#xa;tcp    LISTEN     0      10     127.0.0.1:53                    *:*&#xa;tcp    LISTEN     0      128    127.0.0.1:953                   *:*&#xa;tcp    LISTEN     0      10     [::]:53                 [::]:*&#xa;tcp    LISTEN     0      128       [::1]:953                [::]:*&#xa;===&#xa;&#xa;&#xa;### 9. BIND関連のエラー確認&#xa;===&#xa;sudo journalctl -u named&#xa;===&#xa;&#xa;&#xa;### 10. nmtuiでDNS関連の設定&#xa;最後に自動的に取得されたDNSパラメーターを無視にチェック&#xa;===&#xa;systemctl restart NetworkManager&#xa;===&#xa;### 11. /etc/resolv.conf編集&#xa;&#xa;&#xa;&#xa;&#xa;### 確認&#xa;&#xa;&#xa;    ===&#xa;    [root@localhost ~]# nslookup www.example.com&#xa;    Server:         127.0.0.1&#xa;    Address:        127.0.0.1#53&#xa;&#xa;&#xa;    www.example.com canonical name = example.com.&#xa;    Name:   example.com&#xa;    Address: 192.168.2.100&#xa;&#xa;&#xa;    [root@localhost ~]# nslookup 192.168.2.100&#xa;    100.2.168.192.in-addr.arpa      name = example.com.&#xa;&#xa;&#xa;    [root@localhost ~]# dig www.example.com&#xa;&#xa;&#xa;    ; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.15 &lt;&lt;&gt;&gt; www.example.com&#xa;    ;; global options: +cmd&#xa;    ;; Got answer:&#xa;    ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 49535&#xa;    ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 2&#xa;&#xa;&#xa;    ;; OPT PSEUDOSECTION:&#xa;    ; EDNS: version: 0, flags:; udp: 4096&#xa;    ;; QUESTION SECTION:&#xa;    ;www.example.com.               IN      A&#xa;&#xa;&#xa;    ;; ANSWER SECTION:&#xa;    www.example.com.        86400   IN      CNAME   example.com.&#xa;    example.com.            86400   IN      A       192.168.2.100&#xa;&#xa;&#xa;    ;; AUTHORITY SECTION:&#xa;    example.com.            86400   IN      NS      ns1.example.com.&#xa;&#xa;&#xa;    ;; ADDITIONAL SECTION:&#xa;    ns1.example.com.        86400   IN      A       192.168.2.1&#xa;&#xa;&#xa;    ;; Query time: 0 msec&#xa;    ;; SERVER: 127.0.0.1#53(127.0.0.1)&#xa;    ;; WHEN: 土 12月 30 07:26:48 JST 2023&#xa;    ;; MSG SIZE  rcvd: 108&#xa;&#xa;&#xa;    [root@localhost ~]# dig -x 192.168.2.1&#xa;&#xa;&#xa;    ; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.15 &lt;&lt;&gt;&gt; -x 192.168.2.1&#xa;    ;; global options: +cmd&#xa;    ;; Got answer:&#xa;    ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 21599&#xa;    ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 2&#xa;&#xa;&#xa;    ;; OPT PSEUDOSECTION:&#xa;    ; EDNS: version: 0, flags:; udp: 4096&#xa;    ;; QUESTION SECTION:&#xa;    ;1.2.168.192.in-addr.arpa.      IN      PTR&#xa;&#xa;&#xa;    ;; ANSWER SECTION:&#xa;    1.2.168.192.in-addr.arpa. 86400 IN      PTR     ns1.example.com.&#xa;&#xa;&#xa;    ;; AUTHORITY SECTION:&#xa;    2.168.192.in-addr.arpa. 86400   IN      NS      ns1.example.com.&#xa;&#xa;&#xa;    ;; ADDITIONAL SECTION:&#xa;    ns1.example.com.        86400   IN      A       192.168.2.1&#xa;&#xa;&#xa;    ;; Query time: 1 msec&#xa;    ;; SERVER: 127.0.0.1#53(127.0.0.1)&#xa;    ;; WHEN: 土 12月 30 07:10:16 JST 2023&#xa;    ;; MSG SIZE  rcvd: 112&#xa;    ===" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="40" y="39" width="1387" height="5577" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
